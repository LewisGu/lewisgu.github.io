<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>年中闲谈</title>
      <link href="/2021/08/22/2021-08-22-free-talk/"/>
      <url>/2021/08/22/2021-08-22-free-talk/</url>
      
        <content type="html"><![CDATA[<h1 id="年中闲谈"><a href="#年中闲谈" class="headerlink" title="年中闲谈"></a>年中闲谈</h1><p>今年工作有了调整，变动也不算小，于是开发技能这块的锻炼算是停滞了好一阵子。</p><p>又回头看了看去年的FLAG</p><p>做一些调整吧，今年争取把Java入门了，至少完成语言层面的学习，然后再学一点系统设计方面的东西。</p><p>C/C++这类的，看情况能不能继续推进吧。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021新Flag</title>
      <link href="/2021/01/02/2021-new-flag/"/>
      <url>/2021/01/02/2021-new-flag/</url>
      
        <content type="html"><![CDATA[<p>新的一年，继续立flag。</p><h2 id="工作及技术"><a href="#工作及技术" class="headerlink" title="工作及技术"></a>工作及技术</h2><ol><li><p>【日常】顺利执行并优质完成交代的一切事务。去年做的不错，今年继续加油</p></li><li><p>继续深入C语言开发技巧，基本掌握C++的开发技术【虽然觉得去年也学了点但好像没学到位，今年加个小目标，看完《C++ pp》】，看完《代码整洁之道》【争取吧】，视情况看《重构》【这个真求不来】，至少一小半本《代码大全》【争取吧】。</p></li><li><p>完成至少1篇论文（嵌入式软件数据管理相关），1个软件项目（异构数据转换工具）=&gt;完成后进行软著申请工作，争取1篇专利（数据转换或数据管理工具）。完成目标关联的初稿拟制</p></li><li><p>积极准备5月份的信息系统高级管理师考试，争取一次通过。</p></li></ol><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>线上线下，看50部电影【去年只完成了一半的kpi】，3部话剧/舞剧/演唱会【去年只完成了一部话剧，今年争取都各参加一个】，1次音乐节【视来成都参展的嘉宾而定，未必一定要去】。如果新裤子来成都一定买票去看现场【每年都期待新裤子】。</p><p><del>如果可能的话，今年结束单身</del>。既然已经脱单了，那就好好地和BoBo酱一起探索这个世界。</p><p>最最最重要的，<strong>平安喜乐</strong></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-01-02-2020Conclusion</title>
      <link href="/2021/01/02/2021-01-02-2020conclusion/"/>
      <url>/2021/01/02/2021-01-02-2020conclusion/</url>
      
        <content type="html"><![CDATA[<p>2020，最终还是过去了。</p><p>疫情，买房，工作，恋爱。</p><p>算是今年对我来说的四件大事吧。</p><p>因为疫情的原因，在家宅了快一个月。看了些电影，学了点视频剪辑的技术，做了个鬼畜视频聊以自慰。</p><p>最终还是把房子的事情定了，也因为房贷开始每月月光了。体制内的薪资，害，就这么过吧。</p><p>工作算是稳步开展了，就是年中扁桃体日常化脓，以及年底手指这两个小插曲，让我体会到了身体的重要性。</p><p>至于恋爱，没想到单了这么久，还能遇到这么投缘而美好的一只女孩子，我可真是太幸运了。</p><p>2021，继续努力向前吧！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用笔记</title>
      <link href="/2020/04/06/2020-04-06-linux-daily-note/"/>
      <url>/2020/04/06/2020-04-06-linux-daily-note/</url>
      
        <content type="html"><![CDATA[<p>随着上班的繁忙，又有一个月没有写博客了。</p><p>今天主要记录一下自己使用Linux过程中所使用的主要命令，算是个备忘录。</p><p>由于目前WSL以及虚拟机均使用Ubuntu较多，所以也就主要记录该系统下的命令。</p><h1 id="更换Ubuntu源"><a href="#更换Ubuntu源" class="headerlink" title="更换Ubuntu源"></a>更换Ubuntu源</h1><p>参考来源：<a href="https://blog.csdn.net/zhangjiahao14/article/details/80554616" target="_blank" rel="noopener">Ubuntu18.04下更改apt源为阿里云源</a></p><p>修改Ubuntu源主要三步操作：</p><ol><li>备份sources.list</li></ol><pre class=" language-shell"><code class="language-shell">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</code></pre><ol start="2"><li>按Ubuntu版本对应的代号，设置阿里云作为源。</li></ol><pre><code>Ubuntu 12.04 (LTS)代号为precise。Ubuntu 14.04 (LTS)代号为trusty。Ubuntu 15.04 代号为vivid。Ubuntu 15.10 代号为wily。Ubuntu 16.04 (LTS)代号为xenial。Ubuntu 18.04 (LTS)代号bionic</code></pre><p>或直接使用</p><pre class=" language-shell"><code class="language-shell">lsb_release -c</code></pre><p>查看本版本的代号</p><ol start="3"><li>将下述的内容写到sources.list中</li></ol><pre class=" language-shell"><code class="language-shell">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</code></pre><p>特别注意<strong>如果版本号不对应，无法正常刷新仓库</strong></p><ol start="4"><li>刷新仓库</li></ol><pre class=" language-shell"><code class="language-shell">sudo apt-get updatesudo apt-get upgrade</code></pre>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debug实战【1】：Bilibili排行榜爬虫之弹幕异常错误</title>
      <link href="/2020/03/08/2020-03-08-python-spider-bilibili-barrage-error/"/>
      <url>/2020/03/08/2020-03-08-python-spider-bilibili-barrage-error/</url>
      
        <content type="html"><![CDATA[<p>今天来修一个小bug。</p><p>之前已经把B站爬虫通过编写bat文件并放在启动项里，实现开机自动运行。每次开机的时候就可以自己跑完程序，最后手动输入任意字符退出爬虫。</p><p>今天日常开机，万万没想到熟悉的画面并没有出现，程序自己就闪退了？？？赶紧打开PyCharm康康到底是怎么回事。</p><h1 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h1><p><img src="https://i.loli.net/2020/03/08/datbROHD2kJzrL4.png" alt="词云工作异常"></p><p>由上图可知，爬取第36个视频时，果然出问题了，报错“wordcloud至少需要1个词，获得为0”</p><p>于是乎打开sqlite数据库，找到这个视频。</p><p><img src="https://i.loli.net/2020/03/08/zM1v2HIgspAuaie.png" alt="Emmm这就是第36个视频"></p><p>点进去一看是Up主“观察者网”的投稿，打扰了打扰了。</p><p>所以问题其实就很简单了，本次爬虫运行异常，简简单单就是由于Up主投稿时对弹幕的设置引发的惨案。</p><h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><p>既然问题很简单，那么解决这个问题也很简单，就是检查返回的弹幕列表barrage_list是否为空，若是，则停止词云的生成【没有弹幕词库你难道能脑补词云么】，并在日志中打印出来，否则继续进行词云的生成。</p><p><img src="https://i.loli.net/2020/03/08/vgsJNPwrnMIeRGa.png" alt="检查barrage_list"></p><p>当barrage_list为空时，直接返回0，否则进行弹幕保存操作。</p><p>同时也要修改一下主程序里的处理程序。</p><p><img src="https://i.loli.net/2020/03/08/OugrGnwfxhbaUit.png" alt="主程序中的处理"></p><p>最后大功告成</p><p><img src="https://i.loli.net/2020/03/08/zwxIprCl9HBY5n2.gif" alt="final run"></p>]]></content>
      
      
      <categories>
          
          <category> Debug实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
            <tag> Debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPS运行服务记录</title>
      <link href="/2020/03/01/2020-02-18-my-vps-service/"/>
      <url>/2020/03/01/2020-02-18-my-vps-service/</url>
      
        <content type="html"><![CDATA[<p>今天放搬家假，于是一大早起来就继续鼓捣自己的服务器，然后就想着对目前服务器上跑的东西做个总结，水一篇文章。</p><h2 id="不可言说"><a href="#不可言说" class="headerlink" title="不可言说"></a>不可言说</h2><p>买服务器的本意，自然就是为了不可言说了。</p><p><a href="https://github.com/ToyoDAdoubi" target="_blank" rel="noopener">doubi_Github</a></p><p><a href="https://doubibackup.com/" target="_blank" rel="noopener">逗比根据地</a></p><p><em>v2ray</em></p><p><a href="https://github.com/233boy/v2ray/wiki/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC" target="_blank" rel="noopener">V2Ray一键安装脚本</a><br>建议v2ray本地配置及移动端配置时直接复制服务端的vmess地址</p><h2 id="Jupyter-Notebook服务器"><a href="#Jupyter-Notebook服务器" class="headerlink" title="Jupyter Notebook服务器"></a>Jupyter Notebook服务器</h2><p>在服务器上配个Jupyter Notebook还是很舒服的。</p><h3 id="在服务器上搭建Jupyter-Notebook"><a href="#在服务器上搭建Jupyter-Notebook" class="headerlink" title="在服务器上搭建Jupyter Notebook"></a>在服务器上搭建Jupyter Notebook</h3><p><a href="https://zhuanlan.zhihu.com/p/44405596" target="_blank" rel="noopener">搭建Jupyter Notebook远程云服务器</a><br><a href="https://zhuanlan.zhihu.com/p/64524822" target="_blank" rel="noopener">如何设置远程访问的Jupyter Notebook服务器-04（服务器篇）</a><br>简单概括就是</p><ul><li><ol><li>pip/pip3安装 Jupyter Notebook</li></ol></li><li><ol start="2"><li>生成配置文件</li></ol></li><li><ol start="3"><li>调用notebook.lib.passwd()或IPython.lib.passwd()，输入密码并保存生成的hash</li></ol></li><li><ol start="4"><li>将hash配置到jupyter_notebook_config<pre class=" language-shell"><code class="language-shell">vim ~/.jupyter/jupyter_notebook_config.py</code></pre>在config.py尾部增加<pre class=" language-python"><code class="language-python">c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>ip <span class="token operator">=</span> <span class="token string">'*'</span>                   <span class="token comment" spellcheck="true">#所有绑定服务器的IP都能访问，若想只在特定ip访问，输入ip地址即可</span>c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token number">6666</span>                <span class="token comment" spellcheck="true">#将端口设置为自己喜欢的吧，默认是8888</span>c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>open_browser <span class="token operator">=</span> <span class="token boolean">False</span>     <span class="token comment" spellcheck="true">#我们并不想在服务器上直接打开Jupyter Notebook，所以设置成False</span>c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>notebook_dir <span class="token operator">=</span> <span class="token string">'/root/jupyter_projects'</span> <span class="token comment" spellcheck="true">#这里是设置Jupyter的根目录，若不设置将默认root的根目录，不安全</span>c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>allow_root <span class="token operator">=</span> <span class="token boolean">True</span>      <span class="token comment" spellcheck="true"># 为了安全，Jupyter默认不允许以root权限启动jupyter </span></code></pre></li></ol></li><li><ol start="5"><li>启动服务</li></ol></li><li><ol start="6"><li>设置后台运行</li></ol></li></ul><p>在云服务器中搭建好jupyter并运行后, 发现它会占用当前终端, 于是研究了一下怎么让它在后台运行.</p><pre class=" language-shell"><code class="language-shell">1.入门级: jupyter notebook --allow-root > jupyter.log 2>&1 &2.进阶版: nohup jupyter notebook --allow-root > jupyter.log 2>&1 &</code></pre><p>解释: 1. 用&amp;让命令后台运行, 并把标准输出写入jupyter.log中</p><p>nohup表示no hang up, 就是不挂起, 于是这个命令执行后即使终端退出, 也不会停止运行.</p><p>终止进程</p><p>执行上面第2条命令, 可以发现关闭终端重新打开后, 用jobs找不到jupyter这个进程了, 于是要用ps -a, 可以显示这个进程的pid.</p><pre class=" language-shell"><code class="language-shell">kill -9 pid 终止进程</code></pre><h3 id="将本地Jupyter分享给局域网使用"><a href="#将本地Jupyter分享给局域网使用" class="headerlink" title="将本地Jupyter分享给局域网使用"></a>将本地Jupyter分享给局域网使用</h3><p><a href="https://blog.csdn.net/simple_the_best/article/details/77005400" target="_blank" rel="noopener">设置 jupyter notebook 可远程访问</a></p><h2 id="Uptimerobot监控Website-Ping-VPS-Port"><a href="#Uptimerobot监控Website-Ping-VPS-Port" class="headerlink" title="Uptimerobot监控Website/Ping/VPS Port"></a>Uptimerobot监控Website/Ping/VPS Port</h2><p><a href="https://taifua.com/uptimerobot-monitor.html" target="_blank" rel="noopener">使用UptimeRobot对网站和服务器实时监控</a></p><p>免费版足够使用了，最高可在5min内监控最多50个目标<br>简要概括</p><ol><li>注册账号</li><li>选择Http(s)来监控网站，选择Ping来监控我的服务器。Port一般用于VPS监控端口</li><li>创建监控页，My Settings，选择右下角Add Public Status Pages，进行配置，并将设置的custom domain配置在域名CNAME下，等候DNS生效。</li></ol><p><em>注：</em> Uptimerobot可能会出现访问时502异常，请等待。</p><h2 id="NetData监控"><a href="#NetData监控" class="headerlink" title="NetData监控"></a>NetData监控</h2><p><a href="https://juejin.im/post/5b739906518825612d6449e4" target="_blank" rel="noopener">在Ubuntu上使用Netdata设置实时性能监控</a></p><p>基本上都是一键安装，IP+默认端口19999，无密码</p><h2 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h2><p>VPS使用的是Debian9,故使用ufw设置防火墙</p><p><a href="https://www.howtoing.com/how-to-set-up-a-firewall-with-ufw-on-debian-9" target="_blank" rel="noopener">如何在Debian 9上使用UFW设置防火墙</a></p><p>一些其他的优化</p><p><a href="https://zhang.ge/4321.html" target="_blank" rel="noopener">Linux/VPS系统安全设置整理</a>from <a href="https://zhang.ge/" target="_blank" rel="noopener">张戈博客</a></p><p><a href="https://zhang.ge/2409.html" target="_blank" rel="noopener">Linux优化方法收集及整理</a>from <a href="https://zhang.ge/" target="_blank" rel="noopener">张戈博客</a></p><h2 id="Searx元搜索"><a href="#Searx元搜索" class="headerlink" title="Searx元搜索"></a>Searx元搜索</h2><p>2020.3.1更新</p><p>主要参考</p><p><a href="https://www.moerats.com/archives/875/" target="_blank" rel="noopener">使用Searx搭建一个私人的搜索引擎平台，可展现Google/Bing等70多种搜索网站的搜索结果</a></p><p>Dockerfile直接使用的上面这个，一次性配好。</p><p><a href="https://coderschool.cn/3153.html" target="_blank" rel="noopener">searX 搭建个人聚合搜索引擎教程</a>也可以看看。</p><p>目前比较大的坑就是Caddyfile的配置。</p><p>一种是直接使用教程里的方法，另一种就是自己通过编辑器打开Caddy配置文件进行配置，Caddy作为轻量级Web服务端，还是蛮简单的（虽然我还是没搞懂怎么把非80端口的网络服务配置到一个特定URL上去，后面再搞好了）。</p><p>中间碰到说caddy.service头异常，用vim打开后发现是格式问题，建议本地先编辑好缩进后再复制到编辑器中，BTW 通过xshell复制到vim编辑器好像会吃几个字符来着，，蜜汁不懂。</p><p>搭建好了自然也要在uptimebot上进行监控。</p><p>暂时先这样吧。</p>]]></content>
      
      
      <categories>
          
          <category> VPS开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转】Linux如何查看进程、杀死进程、启动进程等常用命令</title>
      <link href="/2020/02/18/2020-02-18-trans-linux-command/"/>
      <url>/2020/02/18/2020-02-18-trans-linux-command/</url>
      
        <content type="html"><![CDATA[<h2 id="查进程"><a href="#查进程" class="headerlink" title="查进程"></a>查进程</h2><pre><code>ps命令查找与进程相关的PID号：ps a 显示现行终端机下的所有程序，包括其他用户的程序。ps -A 显示所有程序。ps c 列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。ps -e 此参数的效果和指定&quot;A&quot;参数相同。ps e 列出程序时，显示每个程序所使用的环境变量。ps f 用ASCII字符显示树状结构，表达程序间的相互关系。ps -H 显示树状结构，表示程序间的相互关系。ps -N 显示所有的程序，除了执行ps指令终端机下的程序之外。ps s 采用程序信号的格式显示程序状况。ps S 列出程序时，包括已中断的子程序资料。ps -t&lt;终端机编号&gt; 指定终端机编号，并列出属于该终端机的程序的状况。ps u 以用户为主的格式来显示程序状况。ps x 显示所有程序，不以终端机来区分。最常用的方法是ps aux,然后再通过管道使用grep命令过滤查找特定的进程,然后再对特定的进程进行操作。ps aux | grep program_filter_word,ps -ef |grep tomcat</code></pre><p>ps -ef|grep java|grep -v grep 显示出所有的java进程，去处掉当前的grep进程。</p><h2 id="杀进程"><a href="#杀进程" class="headerlink" title="杀进程"></a>杀进程</h2><pre><code>使用kill命令结束进程：kill xxx常用：kill －9 324Linux下还提供了一个killall命令，可以直接使用进程的名字而不是进程标识号，例如：# killall -9 NAME</code></pre><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><pre><code>进入到进程的执行文件所在的路径下，执行文件 ./文件名</code></pre><h2 id="更改档案拥有者"><a href="#更改档案拥有者" class="headerlink" title="更改档案拥有者"></a>更改档案拥有者</h2><pre><code>命令 : chown [-cfhvR] [--help] [--version] user[:group] file...功能 : 更改文件或者文件夹的拥有者参数格式 :　　    user : 新的档案拥有者的使用者 IDgroup : 新的档案拥有者的使用者群体(group)　　       -c : 若该档案拥有者确实已经更改，才显示其更改动作　　       -f : 若该档案拥有者无法被更改也不要显示错误讯息　　       -h : 只对于连结(link)进行变更，而非该 link 真正指向的档案　　       -v : 显示拥有者变更的详细资料　       　-R : 对目前目录下的所有档案与子目录进行相同的拥有者变更(即以递回的方式逐个变更)例如：chown -R oracle:oinstall /oracle/u01/app/oracle     更改目录拥有者为oracle</code></pre><h2 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h2><pre><code>    命令：chmod (change mode)    功能：改变文件的读写和执行权限。有符号法和八进制数字法。    选项：(1)符号法：命令格式：chmod {u|g|o|a}{+|-|=}{r|w|x} filename        u (user)   表示用户本人。        g (group)  表示同组用户。        o (oher)   表示其他用户。        a (all)    表示所有用户。        +          用于给予指定用户的许可权限。        -          用于取消指定用户的许可权限。        =          将所许可的权限赋给文件。        r (read)   读许可，表示可以拷贝该文件或目录的内容。        w (write)  写许可，表示可以修改该文件或目录的内容。        x (execute)执行许可，表示可以执行该文件或进入目录。        (2)八进制数字法：  命令格式：chmod abc file其中a,b,c各为一个八进制数字，分别表示User、Group、及Other的权限。        4 (100)    表示可读。        2 (010)    表示可写。        1 (001)    表示可执行。若要rwx属性则4+2+1=7；若要rw-属性则4+2=6；若要r-x属性则4+1=5。    例如：# chmod a+rx filename            让所有用户可以读和执行文件filename。        # chmod go-rx filename            取消同组和其他用户的读和执行文件filename的权限。        # chmod 741 filename            让本人可读写执行、同组用户可读、其他用户可执行文件filename。# chmod -R 755 /home/oracle    递归更改目录权限，本人可读写执行、同组用户可读可执行、其他用户可读可执行</code></pre><h2 id="修改文件日期"><a href="#修改文件日期" class="headerlink" title="修改文件日期"></a>修改文件日期</h2><pre><code>命令：touch格式：touch filenae功能：改变文件的日期，不对文件的内容做改动，若文件不存在则建立新文件。例如：% touch file</code></pre><h2 id="链接文件"><a href="#链接文件" class="headerlink" title="链接文件"></a>链接文件</h2><pre><code>命令：ln (link)格式：ln [option] filename linkname      ln [option] directory pathname功能：为文件或目录建立一个链。其中，filename和directory是源文件名和      源目录名；linkname和pathname分别表示与源文件或源目录名相链接的      文件或目录。选项：-s  为文件或目录建立符号链接。不加-s表示为文件或目录建立硬链接注释：链接的目地在于，对一个文件或目录赋予两个以上的名字，使其可以出      现在不同的目录中，既可以使文件或目录共享，又可以节省磁盘空间。例如：% ln -s filename linkname</code></pre><h2 id="显示日期"><a href="#显示日期" class="headerlink" title="显示日期"></a>显示日期</h2><pre><code>命令：date例如：% date</code></pre><h2 id="显示日历"><a href="#显示日历" class="headerlink" title="显示日历"></a>显示日历</h2><pre><code>命令：cal (calendar)格式：cal [month] year功能：显示某年内指定的日历例如：% cal 1998 </code></pre><h2 id="显示文件头部"><a href="#显示文件头部" class="headerlink" title="显示文件头部"></a>显示文件头部</h2><pre><code>命令：head格式：head [option] filename功能：显示文件的头部选项：缺省  显示文件的头10行。      -i    显示文件的开始 i行。例如：% head filename</code></pre><h2 id="显示文件尾部"><a href="#显示文件尾部" class="headerlink" title="显示文件尾部"></a>显示文件尾部</h2><pre><code>命令：tail格式：tail [option] filename功能：显示文件的尾部选项：缺省  显示文件的末10行。      -i    显示文件最后 i行。      +i    从文件的第i行开始显示。例如：% tail filename</code></pre><h2 id="显示用户标识"><a href="#显示用户标识" class="headerlink" title="显示用户标识"></a>显示用户标识</h2><pre><code>命令：id格式：id [option] [user]功能：显示用户标识及用户所属的所有组。选项：-a 显示用户名、用户标识及用户所属的所有组注释：例如：% id username</code></pre><h2 id="查看当前登录的用户"><a href="#查看当前登录的用户" class="headerlink" title="查看当前登录的用户"></a>查看当前登录的用户</h2><pre><code>命令：users</code></pre><h2 id="显示都谁登录到机器上"><a href="#显示都谁登录到机器上" class="headerlink" title="显示都谁登录到机器上"></a>显示都谁登录到机器上</h2><pre><code>命令：who格式：who功能：显示当前正在系统中的所有用户名字，使用终端设备号，注册时间。例如：% who</code></pre><h2 id="显示当前终端上的用户名"><a href="#显示当前终端上的用户名" class="headerlink" title="显示当前终端上的用户名"></a>显示当前终端上的用户名</h2><pre><code>命令：whoami格式：whoami功能：显示出当前终端上使用的用户。例如：% whoami</code></pre><h2 id="寻找文件"><a href="#寻找文件" class="headerlink" title="寻找文件"></a>寻找文件</h2><pre><code>命令：find格式：find pathname [option] expression功能：在所给的路经名下寻找符合表达式相匹配的文件。选项：-name     表示文件名      -user     用户名，选取该用户所属的文件      -size     按大小查找，以block为单位，一个block是512B      -mtime n  按最后一次修改时间查找，选取n天内被修改的文件-perm     按权限查找        -type     按文件类型查找-atime    按最后一次访问时间查找例如：% find ./ -name &#39;*abc*&#39; -print</code></pre><h2 id="搜索文件中匹配符"><a href="#搜索文件中匹配符" class="headerlink" title="搜索文件中匹配符"></a>搜索文件中匹配符</h2><pre><code>命令：grep格式：grep [option] pattern filenames功能：逐行搜索所指定的文件或标准输入，并显示匹配模式的每一行。选项：-i    匹配时忽略大小写 -v 找出模式失配的行例如：% grep -i &#39;java*&#39; ./test/run.sh</code></pre><h2 id="统计文件字数"><a href="#统计文件字数" class="headerlink" title="统计文件字数"></a>统计文件字数</h2><pre><code>命令：wc [option] filename功能：统计文件中的文件行数、字数和字符数。选项：-l 统计文件的行数-w 统计文件的单词数-c 统计文件的字符数    注释：若缺省文件名则指标准输入    例如：% wc -c ./test/run.sh</code></pre><h2 id="显示磁盘空间"><a href="#显示磁盘空间" class="headerlink" title="显示磁盘空间"></a>显示磁盘空间</h2><pre><code>命令：df (disk free)格式：df [option]功能：显示磁盘空间的使用情况，包括文件系统安装的目录名、块设备名、总      字节数、已用字节数、剩余字节数占用百分比。选项：-a：显示全部的档案系统和各分割区的磁盘使用情形-i：显示i -nodes的使用量-k：大小用k来表示 (默认值)-t：显示某一个档案系统的所有分割区磁盘使用量-x：显示不是某一个档案系统的所有分割区磁盘使用量-T：显示每个分割区所属的档案系统名称-h: 表示使用「Human-readable」的输出，也就是在档案系统大小使用 GB、MB 等易读的格式。注释：例如：% df -hi</code></pre><h2 id="查询档案或目录的磁盘使用空间"><a href="#查询档案或目录的磁盘使用空间" class="headerlink" title="查询档案或目录的磁盘使用空间"></a>查询档案或目录的磁盘使用空间</h2><pre><code>命令：du (disk usage)格式：du [option] [filename]功能：以指定的目录下的子目录为单位，显示每个目录内所有档案所占用的磁盘空间大小选项：-a：显示全部目录和其次目录下的每个档案所占的磁盘空间-b：大小用bytes来表示 (默认值为k bytes)-c：最后再加上总计 (默认值)-s：只显示各档案大小的总合-x：只计算同属同一个档案系统的档案-L：计算所有的档案大小-h: 表示档案系统大小使用 GB、MB 等易读的格式。例如：% du -a% du -sh /etc 只显示该目录的总合% du /etc | sort -nr | more 统计结果用sort 指令进行排序，sort 的参数 -nr 表示要以数字排序法进行反向排序。</code></pre><h2 id="显示进程"><a href="#显示进程" class="headerlink" title="显示进程"></a>显示进程</h2><pre><code>命令：ps格式：ps [option]功能：显示系统中进程的信息。包括进程ID、控制进程终端、执行时间和命令。选项：-a 显示所有进程信息-U uidlist 列出这个用户的所有进程        -e 显示当前运行的每一个进程信息        -f 显示一个完整的列表-x 显示包括没有终端控制的进程状况 。注释：例如：% ps -ef% ps -aux 然后再利用一个管道符号导向到grep去查找特定的进程,然后再对特定的进程进行操作。</code></pre><h2 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h2><pre><code>命令：kill格式：kill [option] pid功能：向指定的进程送信号或终止进程。kill指令的用途是送一个signal给某一个process，因为大部份送的都是用来杀掉 process 的 SIGKILL 或 SIGHUP ，因此称为 kill 选项：-9  强行终止进程注释：pid标示进程号，可由ps命令得到。例如：% kill -9 pid你也可以用 kill -l 来察看可代替 signal 号码的数目字。kill 的详细情形请参阅 man kill。</code></pre><h2 id="查看自己的IP地址"><a href="#查看自己的IP地址" class="headerlink" title="查看自己的IP地址"></a>查看自己的IP地址</h2><pre><code>命令：ifconfig格式：ifconfig -a</code></pre><h2 id="查看路由表"><a href="#查看路由表" class="headerlink" title="查看路由表"></a>查看路由表</h2><pre><code>命令：netstat格式：netstat -rn</code></pre><h2 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h2><pre><code>命令：telnet格式：telnet hostname</code></pre><h2 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h2><pre><code>命令：ftp (file transfer program)格式：ftp hostname功能：网络文件传输及远程操作。选项：ftp命令：       cd [dirname]  进入远程机的目录       lcd [dirname] 设置本地机的目录       dir/ls        显示远程的目录文件       bin           以二进制方式进行传输asc           以文本文件方式进行传输        get/mget      从远程机取一个或多个文件        put/mput      向远程机送一个或多个文件        prompt        打开或关闭多个文件传送时的交互提示        close         关闭与远程机的连接        quit          退出ftp!/exit ftp登陆状态下，!表示暂时退出ftp状态回到本地目录，exit表示返回ftp状态    注释：    例如：% ftp hostname</code></pre><h2 id="查看自己的电子邮件"><a href="#查看自己的电子邮件" class="headerlink" title="查看自己的电子邮件"></a>查看自己的电子邮件</h2><pre><code>命令：mailx格式：mailx选项：delete  删除next    下一个quit    退出reply   回复   </code></pre><h2 id="回忆命令"><a href="#回忆命令" class="headerlink" title="回忆命令"></a>回忆命令</h2><pre><code>命令：history格式：history功能：帮助用户回忆执行过的命令。选项：注释：例如：% history</code></pre><h2 id="网上对话"><a href="#网上对话" class="headerlink" title="网上对话"></a>网上对话</h2><pre><code>命令：talk格式：talk username功能：在网上与另一用户进行对话。选项：注释：对话时系统把终端分为上下两部分，上半部显示自己键入信息，下半部      显示对方用户键入的信息。键入delete或Ctrl+C则结束对话。例如：% talk username</code></pre><h2 id="允许或拒绝接受信息"><a href="#允许或拒绝接受信息" class="headerlink" title="允许或拒绝接受信息"></a>允许或拒绝接受信息</h2><pre><code>命令：mesg (message)格式：mesg [n/y]功能：允许或拒绝其它用户向自己所用的终端发送信息。选项：n 拒绝其它用户向自己所用的终端写信息      y 允许其它用户向自己所用的终端写信息（缺省值）注释：例如：% mesg n</code></pre><h2 id="给其他用户写信息"><a href="#给其他用户写信息" class="headerlink" title="给其他用户写信息"></a>给其他用户写信息</h2><pre><code>命令：write格式：write username [ttyname]功能：给其他用户的终端写信息。选项：注释：若对方没有拒绝，两用户可进行交谈，键入EOF或Ctrl+C则结束对话。例如：write username</code></pre><h2 id="创建、修改、删除用户和群组"><a href="#创建、修改、删除用户和群组" class="headerlink" title="创建、修改、删除用户和群组"></a>创建、修改、删除用户和群组</h2><pre><code>    a. 创建群组：        例如： groupadd oinstall    创建群组名为oinstall的组        groupadd -g 344 dba         创建组号是344的组，此时在/etc/passwd文件中产生一个组ID（GID）是344的项目。    b. 修改群组：        groupmod:该命令用于改变用户组帐号的属性        groupmod –g 新的GID 用户组帐号名        groupmod –n 新组名 原组名：此命令由于改变用户组的名称    c. 删除群组：groupdel 组名：该命令用于删除指定的组帐号    d. 新建用户：        命令： useradd [－d home] [－s shell] [－c comment] [－m [－k template]]        [－f inactive] [－e expire ] [－p passwd] [－r] name        主要参数        -c：加上备注文字，备注文字保存在passwd的备注栏中。　        -d：指定用户登入时的启始目录。        -D：变更预设值。        -e：指定账号的有效期限，缺省表示永久有效。        -f：指定在密码过期后多少天即关闭该账号。        -g：指定用户所属的群组。        -G：指定用户所属的附加群组。        -m：自动建立用户的登入目录。        -M：不要自动建立用户的登入目录。        -n：取消建立以用户名称为名的群组。        -r：建立系统账号。        -s：指定用户登入后所使用的shell。        -u：指定用户ID号。    举例： # useradd -g oinstall -G dba oracle  创建Oracle用户  e. 删除用户    命令： userdel 用户名    删除指定的用户帐号    userdel –r 用户名(userdel 用户名;rm 用户名)：删除指定的用户帐号及宿主目录    例：#useradd -g root kkk //把kkk用户加入root组里  f. 修改用户    命令： usermod    修改已有用户的信息    usermod –l 旧用户名 新用户名： 修改用户名    usermod –L 用户名： 用于锁定指定用户账号，使其不能登陆系统    usermod –U 用户名： 对锁定的用户帐号进行解锁    passwd –d 用户名： 使帐号无口令，即用户不需要口令就能登录系统    例：#usermod -l user2 user1 //把用户user2改名为user1## 启动、关闭防火墙    永久打开或则关闭    chkconfig iptables on    chkconfig iptables off    即时生效：重启后还原    service iptables start    service iptables stop        或者：    /etc/init.d/iptables start    /etc/init.d/iptables stop## 启动VSFTP服务    即时启动： /etc/init.d/vsftpd start    即时停止： /etc/init.d/vsftpd stop    开机默认VSFTP服务自动启动:    方法一:(常用\方便)    [root@localhost etc]# chkconfig --list|grep vsftpd ( 查看情况)    vsftpd          0:off   1:off   2:off   3:off   4:off   5:off   6:off    [root@localhost etc]# chkconfig vsftpd on  (执行ON设置)    或者:方法二:    修改文件 /etc/rc.local , 把行/usr/local/sbin/vsftpd &amp; 插入文件中，以实现开机自动启动。## vi技巧    a. 进入输入模式    新增 (append)    a ：从光标所在位置後面开始新增资料，光标後的资料随新增资料向後移动。    A：从光标所在列最後面的地方开始新增资料。    插入 (insert)    i：从光标所在位置前面开始插入资料，光标後的资料随新增资料向後移动。    I ：从光标所在列的第一个非空白字元前面开始插入资料。    开始 (open)    o ：在光标所在列下新增一列并进入输入模式。    O: 在光标所在列上方新增一列并进入输入模式。    b. 退出vi    在指令模式下键入:q,:q!,:wq或:x(注意:号），就会退出vi。其中:wq和:x是存盘退出，而:q是直接退出，如果文件已有新的变化，vi会提示你保存文件而:q命令也会失效，这时你可以用:w命令保存文件后再用:q 退出，或用:wq或:x命令退出，如果你不想保存改变后的文件，你就需要用:q!命令，这个命令将不保存文件而直接退出vi。    c. 删除与修改文件的命令：    x：删除光标所在字符。    dd ：删除光标所在的列。    r ：修改光标所在字元，r 後接著要修正的字符。    R：进入取替换状态，新增文字会覆盖原先文字，直到按 [ESC] 回到指令模式下为止。    s：删除光标所在字元，并进入输入模式。    S：删除光标所在的列，并进入输入模式。    d. 屏幕翻滚类命令    Ctrl+u: 向文件首翻半屏    Ctrl+d: 向文件尾翻半屏    Ctrl+f: 向文件尾翻一屏    Ctrl＋b: 向文件首翻一屏    nz: 将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部。    e. 删除命令    ndw或ndW: 删除光标处开始及其后的n-1个字    do: 删至行首    d$: 删至行尾    ndd: 删除当前行及其后n-1行    x或X: 删除一个字符，x删除光标后的，而X删除光标前的    Ctrl+u: 删除输入方式下所输入的文本    f. 搜索及替换命令    /pattern: 从光标开始处向文件尾搜索pattern    ?pattern: 从光标开始处向文件首搜索pattern    n: 在同一方向重复上一次搜索命令    N: 在反方向上重复上一次搜索命令    :s/p1/p2/g: 将当前行中所有p1均用p2替代    :n1,n2s/p1/p2/g: 将第n1至n2行中所有p1均用p2替代    :g/p1/s//p2/g: 将文件中所有p1均用p2替换    g. 复制，黏贴    (1) 选定文本块，使用v进入可视模式；移动光标键选定内容    (2) 复制选定块到缓冲区，用y；复制整行，用yy    (3) 剪切选定块到缓冲区，用d；剪切整行用dd    (4) 粘贴缓冲区中的内容，用p    h. 其他    在同一编辑窗打开第二个文件，用:sp [filename]    在多个编辑文件之间切换，用Ctrl+w</code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发参考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有哪些电影一定要趁年轻看？</title>
      <link href="/2020/02/15/2020-02-15-zhihu-movie-young/"/>
      <url>/2020/02/15/2020-02-15-zhihu-movie-young/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.zhihu.com/question/25699277" target="_blank" rel="noopener">有哪些电影一定要趁年轻看</a></p><p><img src="https://i.loli.net/2020/02/15/fJtSpWayEFRv4Lo.jpg" alt="v2-cc4827a1aa50c37693ec2abd48527185_r.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Movie </tag>
            
            <tag> Zhihu </tag>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫实战【3】：Bilibili排行榜爬虫</title>
      <link href="/2020/02/09/2020-02-09-python-spider-bilibili/"/>
      <url>/2020/02/09/2020-02-09-python-spider-bilibili/</url>
      
        <content type="html"><![CDATA[<p>昨天刷B站的时候，看到@啊泰同学发了一个<a href="https://www.bilibili.com/read/cv4611901" target="_blank" rel="noopener">b站排行榜数据可视化（初学者项目）</a>,正好我也好久没玩过爬虫了，fork/clone下来看了一下，很感兴趣，自己配置了MySQL环境，恢复环境并进行了些许优化</p><p>开发环境说明</p><pre><code>系统版本：      Windows10 1903Python版本：    3.7.4PyCharm版本：   2019.3.2MySQL版本：     5.7.13数据库管理工具：Navicat</code></pre><p>基于“不重复构造轮子”原则，我就在@啊泰同学源码基础上进行修改，形成<a href="https://github.com/LewisGu/bilibili-rank-spider/blob/master/Get-bilibili-rank.py" target="_blank" rel="noopener">我修改优化的源码</a>，欢迎指点。</p><p>接下来主要依次对程序的流程进行梳理以及说明。</p><h2 id="MySQL配置文件解析ReadFile"><a href="#MySQL配置文件解析ReadFile" class="headerlink" title="MySQL配置文件解析ReadFile"></a>MySQL配置文件解析ReadFile</h2><p>这个其实很简单，就是读取一个txt文件并返回包括MySQL登陆的账户名及密码的一个列表，用于后续登陆使用。</p><p>原则上还可以将URL/端口/数据库等信息一同写在文件中，我没做完全是没有这个需要，MySQL服务器是配置在本地通过默认的3306端口通信的。有需求者可自行修改。</p><h2 id="B站排行榜网页下载WebsiteAnalysis"><a href="#B站排行榜网页下载WebsiteAnalysis" class="headerlink" title="B站排行榜网页下载WebsiteAnalysis"></a>B站排行榜网页下载WebsiteAnalysis</h2><p>本程序两大核心功能分别是下载网页并解析，以及将解析的结果写到数据库中。</p><p>本函数即是实现第一个功能。</p><p>B站全站排行榜（日排行）的URL是<a href="https://www.bilibili.com/ranking/all/0/0/1，而其他类型比如番剧榜、新人榜、日排行、三日排行等不同类型的榜单，均可通过&quot;https://www.bilibili.com/ranking/&quot;这个网址前缀，搭配不同标签进行URL构建。" target="_blank" rel="noopener">https://www.bilibili.com/ranking/all/0/0/1，而其他类型比如番剧榜、新人榜、日排行、三日排行等不同类型的榜单，均可通过&quot;https://www.bilibili.com/ranking/&quot;这个网址前缀，搭配不同标签进行URL构建。</a></p><p>使用的库是Requests和BeautifulSoup，爬虫中经常用到这两个库，使用get获取网页后，保存为response对象，再通过response对象的text方法进行解析，解析器使用html-parser。BS4则通过find_all方法搜索所有的rank-item。</p><p><img src="https://i.loli.net/2020/02/09/ZEAx1ro4CshJVUq.png" alt="Snipaste_2020-02-09_11-56-35.png"></p><p>根据上图可知，一个rank-item元素即是排行榜页面中的一个条目，因此可通过解析rank-item元素的属性进行信息的提取。</p><p>另外，由于榜单是日更新，故每天仅采集一次数据，暂时可不用考虑使用反爬措施。</p><p>该函数返回一个包含所有item的列表</p><h2 id="排行榜解析及数据库读写RankSpider"><a href="#排行榜解析及数据库读写RankSpider" class="headerlink" title="排行榜解析及数据库读写RankSpider"></a>排行榜解析及数据库读写RankSpider</h2><p>接下来就是最重要的函数，对列表进行遍历，依次解析，并将信息提取出来，按事先规定好的格式插入数据表。</p><p>这里主要修改了如下几点：</p><ol><li>按当前的日期创建数据表，目前数据库管理的思路暂时为一个榜单一个数据库，而数据库中按天创建数据表，每个数据表再包含榜单及爬取的信息。因此需要根据当前的日期构建数据表名称，并构建创建数据表以及插入数据的SQL语句。</li><li>本函数使用PyMySQL进行数据库读写操作，原有代码每次写完一条item后就关闭游标以及数据库连接，IO开销可能会影响程序效率，故将connection以及cursor移到循环外面，提高效率。</li><li>另外，增加了一些必要的日志打印语句，便于调试(这个算是一直从事嵌入式C语言开发的习惯吧)。不用时可以注释掉。</li></ol><p>程序运行结果如下图所示：</p><p><img src="https://i.loli.net/2020/02/09/qL6PIx378hRzu5d.png" alt="Snipaste_2020-02-09_12-29-12.png"></p><p>通过Navicat查看数据库信息：</p><p><img src="https://i.loli.net/2020/02/09/qUKOMvZeS9VdbpJ.png" alt="Snipaste_2020-02-09_12-31-16.png"></p><p>To be continue:</p><ol><li>完善爬取其他榜单功能</li><li>通过每个条目对应的url跳转至视频页面，爬取评论数等其他信息</li><li>通过Jieba等Python包，绘制每日词云。（这个难度对我来说有点大）</li></ol><p><em>PS</em>顺便记录一下来自<a href="https://www.bilibili.com/read/cv3430609/" target="_blank" rel="noopener">BilibiliAPI合集-持续更新</a>的B站api</p><ol><li><p>比较全的<br><a href="http://api.bilibili.com/x/web-interface/view?aid={av号}" target="_blank" rel="noopener">http://api.bilibili.com/x/web-interface/view?aid={av号}</a></p><p>转载自B站用户<a href="https://space.bilibili.com/293793435" target="_blank" rel="noopener">社会易姐QwQ</a>的<a href="https://www.bilibili.com/read/cv4815593" target="_blank" rel="noopener">【B站API】api研究笔记</a></p></li></ol><pre class=" language-json"><code class="language-json">视频详细信息api.bilibili.com/x/web-interface/view?aid=<span class="token punctuation">{</span>av号<span class="token punctuation">}</span>方式<span class="token operator">:</span>GET参数：参数名     aid        cid内容     视频avID   视频CID必要性     必要      非必要--------------------------------------json回复<span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span>(num<span class="token operator">:</span><span class="token number">0</span>成功 -<span class="token number">400</span>请求错误 -<span class="token number">404</span>无视频<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span>(str<span class="token operator">:</span>错误信息  默认为<span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"ttl"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"bvid"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"aid"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频AVID<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"videos"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频分P数<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"tid"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频分区ID<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"tname"</span><span class="token operator">:</span>(str<span class="token operator">:</span>视频分区名称<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"copyright"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"pic"</span><span class="token operator">:</span>(str<span class="token operator">:</span>视频封面链接 .jpg<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span>(str<span class="token operator">:</span>视频标题<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"pubdate"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频上传时间 时间戳<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"ctime"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频审核时间 时间戳<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"desc"</span><span class="token operator">:</span>(str<span class="token operator">:</span>视频简介<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"state"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"attribute"</span><span class="token operator">:</span><span class="token punctuation">,</span>    <span class="token property">"duration"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频总时长 秒<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"mission_id"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频参与任务ID 默认为空<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"redirect_url"</span><span class="token operator">:</span>(str<span class="token operator">:</span>视频重定向链接 默认为空<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"rights"</span><span class="token operator">:</span>    <span class="token punctuation">{</span>        <span class="token property">"bp"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"elec"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"download"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"movie"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频是电影标志 <span class="token number">0</span>无 <span class="token number">1</span>是<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token property">"pay"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频需要会员标志 <span class="token number">0</span>无 <span class="token number">1</span>需要<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token property">"hd5"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频有高码率标志 <span class="token number">0</span>无 <span class="token number">1</span>有<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token property">"no_reprint"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频禁止转载标志 <span class="token number">0</span>无 <span class="token number">1</span>禁止<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token property">"autoplay"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"ugc_pay"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"is_cooperation"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频合作标志 <span class="token number">0</span>无 <span class="token number">1</span>有<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token property">"ugc_pay_preview"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"no_background"</span><span class="token operator">:</span><span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"owner"</span><span class="token operator">:</span>    <span class="token punctuation">{</span>        <span class="token property">"mid"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频UP主UID<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span>(str<span class="token operator">:</span>视频UP主昵称<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token property">"face"</span><span class="token operator">:</span>(str<span class="token operator">:</span>视频UP主头像图片链接 .jpg或.gif<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"stat"</span><span class="token operator">:</span>    <span class="token punctuation">{</span>    <span class="token property">"aid"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频AVID<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"view"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频观看次数 屏蔽时为str<span class="token operator">:</span><span class="token string">"--"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"danmaku"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频弹幕条数<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"reply"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频评论条数<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"favorite"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频收藏人数<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"coin"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频投币枚数<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"share"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频分享次数<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"now_rank"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频当前排行<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"his_rank"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频历史最高排行<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"like"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频点赞次数<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"dislike"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"evaluation"</span><span class="token operator">:</span>(str<span class="token operator">:</span>视频评分 默认为空<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"dynamic"</span><span class="token operator">:</span>(str<span class="token operator">:</span>引用视频动态内容<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"cid"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频1PCID<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"dimension"</span><span class="token operator">:</span>    <span class="token punctuation">{</span>    <span class="token property">"width"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频1P宽度<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"height"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频1P高度<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token property">"rotate"</span><span class="token operator">:</span><span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"no_cache"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"pages"</span><span class="token operator">:</span>    <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"cid"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频分PCID<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token property">"page"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频分P<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token property">"from"</span><span class="token operator">:</span><span class="token string">"vupload"</span><span class="token punctuation">,</span>            <span class="token property">"part"</span><span class="token operator">:</span>(str<span class="token operator">:</span>视频分P标题<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token property">"duration"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频分P总时长 秒<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token property">"vid"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>            <span class="token property">"weblink"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>            <span class="token property">"dimension"</span><span class="token operator">:</span>            <span class="token punctuation">{</span>                <span class="token property">"width"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频分P宽度<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token property">"height"</span><span class="token operator">:</span>(num<span class="token operator">:</span>视频分P高度<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token property">"rotate"</span><span class="token operator">:</span><span class="token number">0</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"subtitle"</span><span class="token operator">:</span>    <span class="token punctuation">{</span>        <span class="token property">"allow_submit"</span><span class="token operator">:</span>(bool<span class="token operator">:</span>是否允许提交字幕<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token property">"list"</span><span class="token operator">:</span>        <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token property">"id"</span><span class="token operator">:</span>(num<span class="token operator">:</span>字幕ID<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token property">"lan"</span><span class="token operator">:</span>(str<span class="token operator">:</span>字幕语言<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token property">"lan_doc"</span><span class="token operator">:</span>(str<span class="token operator">:</span>字幕语言名<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token property">"is_lock"</span><span class="token operator">:</span>(bool<span class="token operator">:</span>字幕是否被锁定<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token property">"author_mid"</span><span class="token operator">:</span>(num<span class="token operator">:</span>字幕上传者UID<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token property">"subtitle_url"</span><span class="token operator">:</span>(str<span class="token operator">:</span>字幕链接<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token property">"author"</span><span class="token operator">:</span>                <span class="token punctuation">{</span>                    <span class="token property">"mid"</span><span class="token operator">:</span>(num<span class="token operator">:</span>字幕上传者UID<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token property">"name"</span><span class="token operator">:</span>(str<span class="token operator">:</span>字幕上传者昵称<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token property">"sex"</span><span class="token operator">:</span>(str<span class="token operator">:</span>字幕上传者性别 男 女 保密<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token property">"face"</span><span class="token operator">:</span>(str<span class="token operator">:</span>字幕上传者头像链接 .jpg或.gif<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token property">"sign"</span><span class="token operator">:</span>(str<span class="token operator">:</span>字幕上传者签名<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token property">"rank"</span><span class="token operator">:</span><span class="token number">10000</span><span class="token punctuation">,</span>                    <span class="token property">"birthday"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>                    <span class="token property">"is_fake_account"</span><span class="token operator">:</span><span class="token number">0</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token property">"staff"</span><span class="token operator">:</span>    <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"mid"</span><span class="token operator">:</span>(num<span class="token operator">:</span>成员1UID<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span>(str<span class="token operator">:</span>成员<span class="token number">1</span>备注<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span>(str<span class="token operator">:</span>成员<span class="token number">1</span>昵称<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token property">"face"</span><span class="token operator">:</span>(str<span class="token operator">:</span>成员<span class="token number">1</span>头像链接 .jpg或.gif<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token property">"vip"</span><span class="token operator">:</span>            <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span>(num<span class="token operator">:</span>成员<span class="token number">1</span>会员类型 <span class="token number">0</span>无 <span class="token number">1</span>月会员 <span class="token number">2</span>年会员<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token property">"status"</span><span class="token operator">:</span>(num<span class="token operator">:</span>成员<span class="token number">1</span>会员状态 <span class="token number">0</span>无 <span class="token number">1</span>有<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token property">"theme_type"</span><span class="token operator">:</span><span class="token number">0</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"official"</span><span class="token operator">:</span>            <span class="token punctuation">{</span>                <span class="token property">"role"</span><span class="token operator">:</span>(num<span class="token operator">:</span>成员<span class="token number">1</span>认证级别 <span class="token number">0</span>无 <span class="token number">1</span> <span class="token number">2</span>个人认证 <span class="token number">3</span>机构认证<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token property">"title"</span><span class="token operator">:</span>(str<span class="token operator">:</span>成员<span class="token number">1</span>认证信息<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>                <span class="token property">"type"</span><span class="token operator">:</span>(num<span class="token operator">:</span>成员<span class="token number">1</span>认证类型 -<span class="token number">1</span>无 <span class="token number">1</span>认证<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"follower"</span><span class="token operator">:</span>(num<span class="token operator">:</span>成员<span class="token number">1</span>粉丝数<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>UP主、视频API 以{}框出的需要替换</p><p>=====================================<br><a href="http://api.bilibili.com/archive_stat/stat?aid={AV号}&amp;type=jsonp" target="_blank" rel="noopener">http://api.bilibili.com/archive_stat/stat?aid={AV号}&amp;type=jsonp</a><br>AV号仅需填入数字即可</p><h1 id="视频基本信息-AV号、观看、弹幕、评论、收藏、硬币、分享、喜欢、版权-1自制2转载"><a href="#视频基本信息-AV号、观看、弹幕、评论、收藏、硬币、分享、喜欢、版权-1自制2转载" class="headerlink" title="视频基本信息(AV号、观看、弹幕、评论、收藏、硬币、分享、喜欢、版权[1自制2转载])"></a>视频基本信息(AV号、观看、弹幕、评论、收藏、硬币、分享、喜欢、版权[1自制2转载])</h1><p><a href="https://api.bilibili.com/x/space/upstat?mid={UID}&amp;jsonp=jsonp" target="_blank" rel="noopener">https://api.bilibili.com/x/space/upstat?mid={UID}&amp;jsonp=jsonp</a></p><h1 id="UP主信息-视频总播放数、文章总浏览数"><a href="#UP主信息-视频总播放数、文章总浏览数" class="headerlink" title="UP主信息(视频总播放数、文章总浏览数)"></a>UP主信息(视频总播放数、文章总浏览数)</h1><p><a href="https://api.bilibili.com/x/relation/stat?vmid={UID}&amp;jsonp=jsonp" target="_blank" rel="noopener">https://api.bilibili.com/x/relation/stat?vmid={UID}&amp;jsonp=jsonp</a></p><h1 id="UP主信息2-UID、关注数、黑名单、粉丝数"><a href="#UP主信息2-UID、关注数、黑名单、粉丝数" class="headerlink" title="UP主信息2(UID、关注数、黑名单、粉丝数)"></a>UP主信息2(UID、关注数、黑名单、粉丝数)</h1><p><a href="http://api.bilibili.com/x/elec/show?aid={AV号}" target="_blank" rel="noopener">http://api.bilibili.com/x/elec/show?aid={AV号}</a></p><h1 id="视频充电【疑似已无效】"><a href="#视频充电【疑似已无效】" class="headerlink" title="视频充电【疑似已无效】"></a>视频充电【疑似已无效】</h1><p><a href="http://api.bilibili.com/x/tag/archive/tags?aid=AV号&amp;jsonp=jsonp" target="_blank" rel="noopener">http://api.bilibili.com/x/tag/archive/tags?aid=AV号&amp;jsonp=jsonp</a></p><p>视频标签Tag<br>可提取tagid和tagname<br>=====================================<br><a href="http://api.live.bilibili.com/bili/living_v2/UUID?callback=liveXhrDone" target="_blank" rel="noopener">http://api.live.bilibili.com/bili/living_v2/UUID?callback=liveXhrDone</a></p><p>UP主直播间地址</p><p><a href="http://api.bilibili.com/x/v2/reply?jsonp=jsonp&amp;;pn=1&amp;type=1&amp;oid=AV号" target="_blank" rel="noopener">http://api.bilibili.com/x/v2/reply?jsonp=jsonp&amp;;pn=1&amp;type=1&amp;oid=AV号</a></p><p>视频评论</p><p><a href="http://space.bilibili.com/ajax/member/getSubmitVideos?mid=UUID&amp;;pagesize=单页显示数&amp;page=页数" target="_blank" rel="noopener">http://space.bilibili.com/ajax/member/getSubmitVideos?mid=UUID&amp;;pagesize=单页显示数&amp;page=页数</a></p><p>UP主视频列表(分页)</p><p><a href="https://api.bilibili.com/x/web-interface/archive/desc?&amp;;aid=AV号" target="_blank" rel="noopener">https://api.bilibili.com/x/web-interface/archive/desc?&amp;;aid=AV号</a></p><p>视频简介(\n为换行符)</p><p>主站API</p><p><a href="https://api.bilibili.com/x/web-interface/online?&amp;;jsonp=jsonp" target="_blank" rel="noopener">https://api.bilibili.com/x/web-interface/online?&amp;;jsonp=jsonp</a></p><p>在线人数(网页在线、未知[play_online])</p><p><a href="https://api.bilibili.com/x/web-show/res/locs?pf=0&amp;;ids=142%2C2837%2C2836%2C2870%2C2953%2C2954%2C2955%2C2956&amp;jsonp=jsonp" target="_blank" rel="noopener">https://api.bilibili.com/x/web-show/res/locs?pf=0&amp;;ids=142%2C2837%2C2836%2C2870%2C2953%2C2954%2C2955%2C2956&amp;jsonp=jsonp</a></p><p>BW</p><p><a href="https://api.bilibili.com/x/web-interface/dynamic/region?&amp;;jsonp=jsonp&amp;ps=10&amp;rid=1" target="_blank" rel="noopener">https://api.bilibili.com/x/web-interface/dynamic/region?&amp;;jsonp=jsonp&amp;ps=10&amp;rid=1</a></p><p>主页视频信息</p>]]></content>
      
      
      <categories>
          
          <category> Python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5开发踩坑记</title>
      <link href="/2020/02/05/2020-02-05-python-pyqt-bugs/"/>
      <url>/2020/02/05/2020-02-05-python-pyqt-bugs/</url>
      
        <content type="html"><![CDATA[<h2 id="PyUIC配置"><a href="#PyUIC配置" class="headerlink" title="PyUIC配置"></a>PyUIC配置</h2><pre><code>系统版本：Win10 1903Python版本：3.7.6PyQt版本：5.14.1PyQt Sip版本：12.7.1PyCharm版本：2019.3</code></pre><p>参考链接</p><ol><li><a href="https://zhuanlan.zhihu.com/p/35338321" target="_blank" rel="noopener">Pyinstaller打包Python程序以及常见bugs</a></li><li></li></ol><p>2019.3中，extern tool中命令的配置参数已由”parameter”修改为”argument”</p><pre><code>program:            $dir%python.exeargument:           -m PyQt5.uic.pyuic $FileName$ -o $FileNameWithoutExtension$.pyworking directory:  $FileDir$</code></pre><h2 id="PyInstaller打包相关"><a href="#PyInstaller打包相关" class="headerlink" title="PyInstaller打包相关"></a>PyInstaller打包相关</h2><ol><li>图标格式错误<pre><code>AttributeError: module &#39;win32ctypes.pywin32.win32api&#39; has no attribute &#39;error&#39;</code></pre></li><li>图标本身无法打开<pre><code>struct.error: unpack requires a buffer of 16 bytes</code></pre></li><li>无法打包（原因为Python程序是64位）<pre><code>pyinstaller attributeerror &#39;nonetype&#39; object has no attribute &#39;find_module&#39;</code></pre></li></ol><p>解决办法，重新构建一个使用32位python程序工作的venv用于打包</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">set</span> CONDA_FORCE_32BIT<span class="token operator">=</span>1conda create -n venv_name python<span class="token operator">=</span>3.7</code></pre><p>记得配置好PyQt以及PyInstaller</p><ol start="4"><li>123</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PyQt5 </tag>
            
            <tag> Debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5开发尝鲜记【1】</title>
      <link href="/2020/02/05/2020-02-05-python-pyqt-samp-1/"/>
      <url>/2020/02/05/2020-02-05-python-pyqt-samp-1/</url>
      
        <content type="html"><![CDATA[<p>模仿的对象为<a href="https://blog.csdn.net/u014563989/article/details/76696763" target="_blank" rel="noopener">PyQt简单例子: 包括ui文件生成, 代码, 打包exe</a></p><p>开发环境</p><pre><code>系统版本：      Windows10 1903Python版本：    3.7.6PyQt版本：      5.14.1PyQt Sip版本：  12.7.1PyCharm版本：   2019.3</code></pre><p><a href="https://github.com/LewisGu/PyQtPractise/tree/master/Test1" target="_blank" rel="noopener">我的源码</a></p>]]></content>
      
      
      <categories>
          
          <category> Python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PyQt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人向电影推荐</title>
      <link href="/2020/02/03/2020-02-03-my-movie-recommand/"/>
      <url>/2020/02/03/2020-02-03-my-movie-recommand/</url>
      
        <content type="html"><![CDATA[<p>一直都比较喜欢看电影，也算是对看过的电影做个盘点推荐什么的。</p><h2 id="青春片"><a href="#青春片" class="headerlink" title="青春片"></a>青春片</h2><p>虽然已经二十大几了，但还是会对青春片有别样的喜欢，从高三寒假补课期间生物老师给我们放《那些年》开始，就对这个题材充满兴趣。</p><h3 id="推荐1：阳光灿烂的日子"><a href="#推荐1：阳光灿烂的日子" class="headerlink" title="推荐1：阳光灿烂的日子"></a>推荐1：<a href="https://movie.douban.com/subject/1291875/" target="_blank" rel="noopener">阳光灿烂的日子</a></h3><h3 id="推荐2：过春天"><a href="#推荐2：过春天" class="headerlink" title="推荐2：过春天"></a>推荐2：<a href="https://movie.douban.com/subject/27191431/" target="_blank" rel="noopener">过春天</a></h3>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Movie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国大学MOOC——郭炜《C++面向对象程序设计》笔记——第二章</title>
      <link href="/2020/01/13/2020-01-13-163mooc-cpp-ch02-copy/"/>
      <url>/2020/01/13/2020-01-13-163mooc-cpp-ch02-copy/</url>
      
        <content type="html"><![CDATA[<p>由于最近开始在做C++开发，所以也打算在MOOC上继续跟郭炜老师的《C++面向程序设计》，基本上入门C++。<br>下面的文字，主要就是跟着学习时自己的一点体会。</p><h2 id="第二章-类和对象基础"><a href="#第二章-类和对象基础" class="headerlink" title="第二章 类和对象基础"></a>第二章 类和对象基础</h2><p>私有成员无法在外部进行访问<br>而构造函数与析构函数往往是 public的。<br>隐藏则可以通过对私有成员进行优化，便于后续功能的全面修改。</p><p>成员函数可以重载，也可以带缺省值。<br>使用缺省参数时要避免有函数重载时的二义性。</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>构造函数名称与类型名相同，是Public的，可以有参数，不能有返回值。用于初始化。<br>若不写构造函数，则自动生成一个无参数的构造函数。构造函数的执行次数只有一次，即在初始化的时候。<br>如果编写带参数的构造函数，则在初始化对象的时候，也要给其赋初始化的值。<br>构造函数可以有多个，只要参数个数和参数类型不同。</p><h3 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a>复制构造函数</h3><p>只有一个参数，即对同类对象的<strong>引用</strong>。</p><pre class=" language-c++"><code class="language-c++">Complex c1;Complex c2(c1);</code></pre><p>复制构造函数用于对新对象的初始化，无论这个新对象是调用函数的形参还是返回值。</p><p>复制构造函数调用的开销较大，故在函数中作为形参调用时，可使用引用类型作为参数，并加上const关键字。</p><h3 id="类型转换构造函数"><a href="#类型转换构造函数" class="headerlink" title="类型转换构造函数"></a>类型转换构造函数</h3><pre class=" language-c++"><code class="language-c++">complex(int i){    real = i;       imag = 0; }</code></pre><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><p>对象数组生命期消亡时，对象数组的每一个元素的析构函数都会被调用。</p><p>delete也可调用析构函数。同样对对象数组进行delete时候也会调用多次析构函数。</p><h3 id="构造函数析构函数的使用"><a href="#构造函数析构函数的使用" class="headerlink" title="构造函数析构函数的使用"></a>构造函数析构函数的使用</h3><p>new出的对象，只有在delete的时候才会调用析构函数。<br>全局对象，先声明的后消亡。</p>]]></content>
      
      
      <categories>
          
          <category> C++学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> MOOC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020新年新Flag</title>
      <link href="/2020/01/12/2020-01-08-new-year-wish/"/>
      <url>/2020/01/12/2020-01-08-new-year-wish/</url>
      
        <content type="html"><![CDATA[<p>新的一年，立flag的习惯还是得要有的。</p><ol><li><p>顺利执行并优质完成交代的一切事务</p></li><li><p>深入C语言开发技巧，基本掌握C++的开发技术，看完《代码整洁之道》，半本《重构》，至少一小半本《代码大全》。</p></li><li><p>线上线下，看55部电影，3部话剧/舞剧/演唱会，1次音乐节。如果新裤子来成都一定买票去看现场。</p></li><li><p>如果可能的话，今年结束单身。</p></li><li><p>平安喜乐</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国大学MOOC——郭炜《C++面向对象程序设计》笔记——第一章</title>
      <link href="/2020/01/12/2020-01-12-163mooc-cpp-ch01/"/>
      <url>/2020/01/12/2020-01-12-163mooc-cpp-ch01/</url>
      
        <content type="html"><![CDATA[<p>由于最近开始在做C++开发，所以也打算在MOOC上继续跟郭炜老师的《C++面向程序设计》，基本上入门C++。<br>下面的文字，主要就是跟着学习时自己的一点体会。</p><h2 id="第一章-从C到C"><a href="#第一章-从C到C" class="headerlink" title="第一章 从C到C++"></a>第一章 从C到C++</h2><p>强制类型转换</p><pre class=" language-c++"><code class="language-c++">int()</code></pre><p>C++中的强制类型转换，有点类似Python中的思路，将类型作为”函数名“进行书写。</p><h3 id="1-引用"><a href="#1-引用" class="headerlink" title="1.引用"></a>1.引用</h3><p>引用的主要用途是解决C语言中的“修改赋值”</p><h3 id="2-Const关键字"><a href="#2-Const关键字" class="headerlink" title="2.Const关键字"></a>2.Const关键字</h3><p>目前感觉Consts关键字主要还是用于防止函数内修改相关结构体成员的用处，和函数形参中的指针联合使用。</p><h3 id="3-动态内存分配"><a href="#3-动态内存分配" class="headerlink" title="3.动态内存分配"></a>3.动态内存分配</h3><p>相对比C语言中的malloc写法的复杂，“new + 类型名”真的不要太好用。<br>返回类型为“类型名 *”</p><p>写完动态内存分配后，需要同时写上释放语句</p><pre class=" language-c++"><code class="language-c++">delete T</code></pre><p>注：delete 能且仅能释放自己申请的变量，且只能释放一次</p><p>释放数组变量，需要在delete后，增加“[]”</p><h3 id="4-内联函数和重载函数"><a href="#4-内联函数和重载函数" class="headerlink" title="4.内联函数和重载函数"></a>4.内联函数和重载函数</h3><pre class=" language-c++"><code class="language-c++">//内联函数inline void function (type para){    xxx;    return;}//重载函数void func(type1 para)void func(type2 para)void func(type3 para，type4 para2)</code></pre><p>注意：重载函数的重点在于参数表不同（可能是参数名不同，或参数个数不同），需要一一对应类型名及变量个数，否则会出现二义性。</p><p>缺省:<br>Eg：</p><pre class=" language-c++"><code class="language-c++">void func(int a,int b = 2,int c = 5)</code></pre><p>缺省的功能在于拓展可扩充性</p><h3 id="5-类和对象的基本概念-I"><a href="#5-类和对象的基本概念-I" class="headerlink" title="5.类和对象的基本概念 I"></a>5.类和对象的基本概念 I</h3><p>这部分其实在郭老师的书里是第二章了，不过还是按MOOC放在第一章吧。</p><p><strong>结构化程序设计的不足</strong></p><p>最深的体会就是，结构化程序设计中更强调对一个特定的功能，由于其算法流程固定，故可进行层层自顶向下设计，而面向对象的设计，更强调对某类数据进行处理，这样强化了“数据”以及“算法”之间的关系，再次反映了Pascal发明人沃斯先生的“程序 = 数据类型 + 算法”论述。同时，结构化程序设计中，由于程序规模较大，数据类型不同，故重用程度难以提高。</p><p>对象的特点包括属性和方法，其中属性即数据，方法即算法。</p><p><strong>面向对象设计的四个基本特点</strong><br>将事物的相同特点概括出来，即是“抽象”<br>将属性和方法捆绑起来，即是“封装”<br>“继承”即时从原有的“类”中产生新的“类”的过程。<br>“多态”是指不同“类”中可能存在相同名字不同实现方式的“方法”</p><p>类的成员函数调用首先需要声明一个对象，随后需要使用“.”对其进行调用</p><pre class=" language-c++"><code class="language-c++">/*成员函数的声明*/CIRCLE a;//a为CIRCLE对象 a有一个成员函数 inita.init();a->init();CIRCLE & A = a;A->init();</code></pre><p>对象的大小等于所有成员变量大小之和。</p>]]></content>
      
      
      <categories>
          
          <category> C++学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> MOOC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常小技巧</title>
      <link href="/2020/01/12/2020-01-12-dailly-tips/"/>
      <url>/2020/01/12/2020-01-12-dailly-tips/</url>
      
        <content type="html"><![CDATA[<p>本文主要也就是对日常使用电脑过程中的小技巧进行记录。</p><h2 id="Office"><a href="#Office" class="headerlink" title="Office"></a>Office</h2><ol><li>查找导致软件无法响应<br>可能的情况：<ol><li>内存占用：释放内存</li><li><strong>Word文件名过长</strong> 尤其涉及英文文件</li><li>从移动存储设备读取文件时，由于移动存储设备无法响应导致</li><li>word文件损坏</li></ol></li></ol><h2 id="CMD-ssr"><a href="#CMD-ssr" class="headerlink" title="CMD ssr"></a>CMD ssr</h2><p>Windows 命令行科学上网</p><h3 id="临时设置"><a href="#临时设置" class="headerlink" title="临时设置"></a>临时设置</h3><p><a href="https://gist.github.com/dreamlu/cf7cbc0b8329ac145fa44342d6a1c01d" target="_blank" rel="noopener">github链接</a></p><pre><code>cmd命令行:(不用socks5)(临时设置)(也可放置环境变量)set http_proxy=http://127.0.0.1:1080    //1080改为自行设定的端口set https_proxy=http://127.0.0.1:1080   //1080改为自行设定的端口ps:一定要用cmd命令行，千万别用powershell !!!简易测试命令：curl https://www.google.com（别用ping）</code></pre><p>切记等号两端不能空，否则设置失败<br>目前已知重启后需再次进行设置，方可生效</p><h3 id="Anaconda更新异常，使用conda即打印错误日志"><a href="#Anaconda更新异常，使用conda即打印错误日志" class="headerlink" title="Anaconda更新异常，使用conda即打印错误日志"></a>Anaconda更新异常，使用conda即打印错误日志</h3><pre class=" language-bat"><code class="language-bat">Error processing line 3 of /home/cjones/.local/lib/python3.6/site-packages/googleapis_common_protos-1.5.8-py3.6-nspkg.pth:  Traceback (most recent call last):    File "/usr/lib/python3.6/site.py", line 174, in addpackage      exec(line)    File "<string>", line 1, in <module>    File "<frozen importlib._bootstrap>", line 568, in module_from_spec  AttributeError: 'NoneType' object has no attribute 'loader'Remainder of file ignored</code></pre><p>此时重新通过pip安装matplotlib即可</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码构建之我见（1）</title>
      <link href="/2020/01/05/2020-01-05-clean-code-1/"/>
      <url>/2020/01/05/2020-01-05-clean-code-1/</url>
      
        <content type="html"><![CDATA[<p>说起来，敢在其实还没怎么会写代码的这会儿，起了个这么标题党的名字，“代码构建之我见”，诚惶诚恐。但本质上来讲，还是分享一下自己的一些想法。顺便也算是个总结。</p><p>从研究生开始，我使用过的编程语言包括C/C++/Python/Matlab/VHDL/Verilog HDL,最近大半年，主要还是从事嵌入式系统开发相关工作，在ARM上写一点C，也有做控制流程，也有做算法处理。暂时想把这部分工作的心得，主要分为纯软件编码相关的“代码构建”，以及项目开发整体流程上技巧相关的“项目推进”两个部分。</p><p>话不多说，这篇主要谈谈变量、注释、函数层面的一些观点，愚者之言，智者审之。</p><p>····································</p><p>开篇我想提几本我最近半年多都在看在学习的书：《代码整洁之道》、《重构：改善既有代码的设计》、《代码大全》。</p><p>这几本书可以说引领了我进入用“心”编码的大门，正如2020年搭建的这个博客的名字——“浅码深思”，写代码的时候，思考其实比写更为重要。但又由于写代码不可能一蹴而就地完成，bug free更是奢望，故而编写边修改、重构，也就成了必然。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在编写代码的最初，我对变量的重视程度，其实不太够，总觉得命名的时候能基本达意即可，写了这大半年，感觉还是有些基本规则需要遵循的：</p><ol><li>变量名至少需要所见即所得，且与在函数/程序中的功能相对应</li></ol><p>这是最基本的规则，没有人想看到一堆a/b/c，aa/bb/cc这种更是噩梦，讲道理这些基本规则应该是C语言教师在教授课程的时候告知学生的，然而现在可能大多数老师自己都不写代码了。代码规范，在横向项目里，估计更是甲方不提，基本就当没有了罢。</p><ol start="2"><li>在所见即所得的基础上，尽可能短而具备更多信息</li></ol><p>信息丰富当然是好的，但</p><pre class=" language-c"><code class="language-c">g_up_to_pc_interial_navigation_information_datag_up2pc_InterNaviInfo_data</code></pre><p>明显长度更长，信息量却相当。有的时候单词的缩写不影响意思表达的时候，可以适当简写，为了突出，则可以使用大小写，或者下划线以区分。</p><ol start="3"><li>特殊前缀后缀使用</li></ol><p>前缀后缀的使用，很多时候更多是表示变量类型，比如n表示char型/int8长度的变量，_ptr后缀用于指针变量。这些前缀后缀的使用，在最大限度维持变量长度的同时，增加了信息量，岂不美哉。</p><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a><strong>未完待续</strong></h1>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北邮人下载环境构建</title>
      <link href="/2019/02/14/2019-02-14-byr-download-envn-build/"/>
      <url>/2019/02/14/2019-02-14-byr-download-envn-build/</url>
      
        <content type="html"><![CDATA[<h1 id="北邮人下载环境构建"><a href="#北邮人下载环境构建" class="headerlink" title="北邮人下载环境构建"></a>北邮人下载环境构建</h1><p>离校有一段时间了，在网上看了很多教程，打算选择自己搭建下载环境。</p><p>本文的本质其实是若干教程的集合，其中参考最多的为<a href="https://www.stackcc.com/2018/11/08/ssr-vps/" target="_blank" rel="noopener">最全搭梯子教程</a>。本文意在补充该教程缺失或不足之处。</p><h5 id="1-VPS"><a href="#1-VPS" class="headerlink" title="1.VPS"></a>1.VPS</h5><p>VPS选用Vultr，和搬瓦工一样都是比较好上手的。最近（2019-2-14）有充值送50刀的活动，支持微信和支付宝，冲10刀得60刀，按最低服务价格5刀/月，也可以用一年，可以说是十分划算了。</p><p>需要注意的是机房的选择，每次开机都会收1美分的费用，不管能不能ping通，所以还是需要谨慎，<del><a href="https://blog.csdn.net/LinearF/article/details/80799667" target="_blank" rel="noopener">校外用支持IPV6的ss代理仍无法连接北邮人bt的解决方法</a></del>，日本IP地址已被墙，本人连续开美国西雅图、硅谷、纽约几个ip均验证能Ping通但国内22端口关闭，只有删号重练2333。最后选择的是英国的IP，具体详见上网搭梯子教程，记得点击“Enable IPV6”。</p><p><strong>2020年更新</strong>PS: 2019年9月左右，英国的这个IP已经被ban了。后续找了半天，测IP和端口，配环境花了一天，墙可能没高，但Vultr的IP污染是越来越严重了，也不知道今后会怎样，哎。</p><p>开机后，使用Xshell进行ssh远程登陆，具体谷歌Xshell使用，为确保ssh成功，需同时检查“本地ping”、”国内端口开启情况“、”国外端口开启情况“，否则删号重练吧。</p><p>ssh登陆后，使用秋水逸冰的脚本一键配置SSR，具体参数见<a href="https://www.workhub.life/2017/10/25/ssr%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/" target="_blank" rel="noopener">SSR服务端配置说明</a>，完成配置后，保存相关信息，用于设置客户端。</p><h5 id="2-SSR"><a href="#2-SSR" class="headerlink" title="2.SSR"></a>2.SSR</h5><p>如果只是为了浏览网页，最全搭梯子教程中的客户端足以使用，但由于后续涉及utorrent相关配置，故建议使用<a href="https://github.com/Tsuk1ko/SS-and-SSR-Collection/blob/master/README.md" target="_blank" rel="noopener">SS-and-SSR-Collection</a>下的客户端，可配参数更为全面。该客户端为免安装，解压后，在SSR中配置VPS端中的IP地址、SSR参数等信息。除此之外，在客户端中的选项设置中，勾选“允许来自局域网的连接”。此时开启全局模式（更多配置待研究）</p><p><strong>2020年更新</strong>PS:其实ssr一般也够用了。。</p><h5 id="3-UTorrent"><a href="#3-UTorrent" class="headerlink" title="3.UTorrent"></a>3.UTorrent</h5><p>仅需要配置设置——连接——代理服务，类型选为Socks5，代理填“127.0.0.1”端口为”1080“<strong>（部分电脑上可能会出现端口冲突，同时在SSR和UT里改一下就好）</strong>，并勾选“通过代理服务器解析主机名”以及“对于点对点连接使用代理服务器”。应用并确定。</p><p>登陆北邮人，下载种子并在UT中点开，即可享受十足的速度了。</p><p>大功告成！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tool </tag>
            
            <tag> VPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LabWindows/CVI与Matlab混合编程的一种实现方法</title>
      <link href="/2018/07/28/2018-07-28-labwindows-matlab-mix-program/"/>
      <url>/2018/07/28/2018-07-28-labwindows-matlab-mix-program/</url>
      
        <content type="html"><![CDATA[<p>最近一段时间都在学习基于LabWindows/CVI（后文简称CVI）开发模拟软件，由于已有一个不太稳健，但基本框架较为齐备的工程。所以我的工作主要是在这个已有的工程上进行debug、整理修改、开发新功能，从5月开始已经持续了接近三个月。</p><p>在之前的开发过程中我就留意到了一点，当在某个具有表格控件与图表控件的子界面传输数据（数据个数约10^6左右）结束后，退出界面时有5-8s左右的卡顿，期间无法进行任何操作。这让我开始对基于CVI开发的这个软件其运行速度有所留意，毕竟谁都希望使用的软件流畅顺滑。</p><p>而在实现某个功能完毕，进行模块测试时，发现由于涉及了两重循环，且内部需要进行复数运算（基本都是使用自定义的函数实现的，如求e的复数次方），程序运行速度极慢，10x245000的循环，内部基本为复数运算，在CVI中使用C语言耗费了20s才完成，而按相同的思路（也使用两重循环）完成的程序，使用Matlab仅需要2s，在使用行向量直接运算进行优化后，时间缩短到0.2s。因此我产生了在CVI中调用Matlab以优化复杂运算速度的需求与想法。</p><p>有了这个想法后，我开始查阅相关的书籍和论文，然后发现虽然CVI作为一款极you其dian成guo熟shi的软件，但相关的资料并不完整，尤其很难面面俱到某个细分小方向的实现细节。</p><p>书籍中较为全面介绍与Matlab混合编程的，是刘君华主编的《基于LabWindows/CVI的虚拟仪器设计》。其4.2节即为《LabWindows/Cvi与Matlab的接口原理与方法》，在我自行实现混合编程的前期，主要参考的就是这个章节的内容。</p><p>经历了这个开发过程后，我发现相比书籍而言更有价值的是很多文献资料里都提到而没有进行深入分析的示范案例（位于安装目录\CVI2012\samples\activex\matlab下的工程demoforMATLABinterface）。个人建议直接阅读这个工程中的主文件demoforMATLABinterface.c，研究各函数的使用方法。</p><p>当然不只是Matlab的混合编程，Sample文件夹下的例子都值得细细品味学习。</p><p>下面我将从ActiveX服务配置、常用函数及开发小结、测试结果三个方面进行总结。</p><h2 id="一、ActiveX服务的配置"><a href="#一、ActiveX服务的配置" class="headerlink" title="一、ActiveX服务的配置"></a>一、ActiveX服务的配置</h2><p>由于一般而言sample中的例子由于未在本机上正常链接CVI与Matlab的接口，故无法直接运行。并且报“没有注册类”错误。这里给出配置本机适用的ActiveX服务并建立一个可执行版本的demoMATLABinterface工程的全过程。目前暂时我还没有发现有相关的教程，各位初学者可以参考一下。</p><p>软件开发环境：Matlab 2009a(32-bit)，LabWindows/CVI 2012 SP1</p><p>系统环境：Windows 7 <strong>64位</strong>专业版</p><p>硬件环境：处理器i7-4790主频3.6GHz，内存16G。</p><p>根据多篇论文归纳可知，CVI和Matlab的混合编程有引擎、ActiveX服务、编译器三种主流实现方法，各有优劣。本文主要针对第二种方法进行讲解。</p><p>需要着重强调。由于CVI是32位软件（至少2012以及2017均为32-bit），所以使用本方法进行混合编程实现时，需<strong>使用32位版本的Matlab，如2009a，否则CVI与Matlab的混合编程无法正常运行</strong>。</p><p>首先建立空工程，依次选择“Tool——Create ActiveX Controller ”，弹出名为“ActiveX Controller Wizard”的引导，首先是有点基本介绍的欢迎页，点next跳过，然后CVI自动索引所有可以使用的ActiveX Server，直接往下拉，选中”Matlab Application(Version 8.5) Type Library“。</p><p><strong>注</strong>：CVI软件需在matlab安装完毕后再进行安装，否则CVI无法找到Matlab。若此处出现“the tyoe library is not intended for use on win32”一般原因即为Matlab版本并非32位，由于CVI自身就是32位软件。</p><p>进入到下一步后，输入工具前缀名（可以简单理解为所生成的服务控件名称），并选择.fp文件的保存路径。</p><p>进入下一步，点击Advanced Option，在弹出窗口中点击“check all”，然后点击“OK”即可，再下一步即完成ActiveX服务控件的生成，空工程中包含了一个名为MLApp.fp的工具文件，而在文件夹中，出现了一个名为msvc的文件夹以及五个名称均为MLApp的文件，扩展名分别为.c .fp .h .obj .sub。</p><p>新建一个名为demoMatlab的文件夹，将samples\activex\matlab文件夹中，名为demoforMATLABinterface的.c .cws .h .prj .uir五个文件，以及chirp.m、cvispiral.m、meshgauss.m三个.m文件，名为matlabutil的.c与.h两个文件拷贝到demoMatlab中，此外，将上段段尾提到的四个名为MLApp的文件（除MLApp.c）也拷贝到demoMatlab中。</p><p>在CVI中打开prj，由于demoMATLABinterface工程下包含的是名为matlabsrvr7的ActiveX服务，故将matlabsrvr7的.c .h .fp文件全部移除，通过“Edit——Add Files To Project”将四个名为MLApp的文件（除MLApp.c）添加进工程，再进行编译，此时demoforMATLABinterface即可正常运行，正常调用matlab完成各种功能，如下所示。</p><p><img src="https://img-blog.csdn.net/20180728210828792?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="功能实现"></p><p>工程所包含的文件如下图所示。</p><p><img src="https://img-blog.csdn.net/20180728210940788?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h3><p>通过ActiveX服务调用Matlab最重要的地方在于成功建立CVI与Matlab的接口，一般需要在本机上生成对本机有效的服务控件，否则由于不同电脑上CVI以及Matlab版本不同，位数不同，一般情况下均无法直接运行。</p><p>而在正常生成服务控件后，将 .fp .h .obj .sub四个文件拷贝至各目标工程所在的文件夹下，并成功添加到工程，即可完成对Matlab的调用。</p><h2 id="二、常用函数的讲解与混合编程开发小结"><a href="#二、常用函数的讲解与混合编程开发小结" class="headerlink" title="二、常用函数的讲解与混合编程开发小结"></a>二、常用函数的讲解与混合编程开发小结</h2><p>上文讲解了ActiveX服务的配置。本节主要讲解一下demo中涉及到的一些函数用法注意事项，最后根据我开发相关功能的经历，进行一个小结。</p><p>demo的面板如下所示</p><p><img src="https://img-blog.csdn.net/20180728211042348?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>由图可一目了然，demo通过例子实现了加载Matlab、退出Matlab、退出演示demo、运行Matlab命令、改变Matlab脚本窗口大小、进行FFT运算、矩阵转置、解方程并绘图、发送序列到Matlab、从Matlab中接收序列、运行M文件这几种功能。</p><p>下面对其中使用到的函数进行对应的介绍：</p><p>1.加载Matlab：MLApp_NewDIMLApp。</p><p>由于CVI有一定年头了，很多书籍介绍混合编程时使用的都是较早的版本，加载函数仅有两个参数，故运行在新版本CVI软件中时可能出现“过多输入”的错误，此时需要使用新版的MLApp_NewDIMLApp函数。</p><p>该函数在ActiveX服务配置后生成的最底层MLApp.c文件中被定义（<strong>再次说明了在本机上第一次使用ActiveX服务时需要对其进行配置的重要性</strong>），其在头文件中的声明和使用如下所示。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//声明</span>HRESULT CVIFUNC <span class="token function">MLApp_NewDIMLApp</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>server<span class="token punctuation">,</span> <span class="token keyword">int</span> supportMultithreading<span class="token punctuation">,</span>                                  LCID locale<span class="token punctuation">,</span> <span class="token keyword">int</span> reserved<span class="token punctuation">,</span>                                  CAObjHandle <span class="token operator">*</span>objectHandle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用</span>stat <span class="token operator">=</span> <span class="token function">MLApp_NewDIMLApp</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>LOCALE_NEUTRAL<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>hMatlab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//加载Matlab</span><span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">!=</span> SUCCESS<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">MessagePopup</span><span class="token punctuation">(</span><span class="token string">"警告"</span><span class="token punctuation">,</span><span class="token string">"Matlab加载出错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>函数末尾的hMatlab为全局的Matlab句柄，需提前定义（尤其当你想在其他地方也调用Matlab时）</p><p>不仅是该函数，大多数函数均会返回一个状态变量，故一般使用上面这种形式进行编程，以对软件的运行进行更好的控制，当加载错误时，能有效报错，防止软件无故崩溃</p><p>2.改变窗口大小：MinMaxMatlab</p><p>该函数在maltbutil.c文件中被定义，在最底层的MLApp之上进行进一步封装得到，0表示最小化窗口，1表示最大化窗口。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MinMaxMatlab</span><span class="token punctuation">(</span>CAObjHandle hMatlab<span class="token punctuation">,</span> <span class="token keyword">int</span> minmaxFlag<span class="token punctuation">)</span>    <span class="token function">MinMaxMatlab</span><span class="token punctuation">(</span>hMatlab<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.退出Matlab脚本：MLApp_DIMLAppQuit</p><p>该函数在MLApp.c文件中被定义，也可以对其进行进一步的封装。</p><pre class=" language-c"><code class="language-c">HRESULT CVIFUNC <span class="token function">MLApp_DIMLAppQuit</span> <span class="token punctuation">(</span>CAObjHandle objectHandle<span class="token punctuation">,</span>                                   ERRORINFO <span class="token operator">*</span>errorInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>stat <span class="token operator">=</span> <span class="token function">MLApp_DIMLAppQuit</span> <span class="token punctuation">(</span><span class="token operator">*</span>hMatlab<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><p>4.运行Matlab命令：RunMatlabCommand</p><p>该函数在maltbutil.c文件中被定义，仅可执行Matlab内部函数相关的命令，无法执行自定义函数命令，否则会报“undefined function or method”错误。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">RunMatlabCommand</span><span class="token punctuation">(</span>CAObjHandle hMatlab<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>command<span class="token punctuation">)</span>       result <span class="token operator">=</span> <span class="token function">RunMatlabCommand</span><span class="token punctuation">(</span>hMatlab<span class="token punctuation">,</span><span class="token string">"mMatrix=inv(cMatrix);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> SUCCESS<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">MessagePopup</span> <span class="token punctuation">(</span><span class="token string">"ERROR"</span><span class="token punctuation">,</span> <span class="token string">"Error in sending command to MATLAB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>涉及的变量mMatrix与cMatrix无需在CVI中进行声明。</p><p>5.发送/接收字符串：SendString/GetString</p><p>该函数在maltbutil.c文件中被定义，由于Matlab不支持BSTRs，故发送接收过程中需要使用Fmt函数进行字符串与双精度浮点数的转换。</p><p>Fmt函数示例如下：</p><pre class=" language-c"><code class="language-c"><span class="token function">Fmt</span><span class="token punctuation">(</span>CVIString<span class="token punctuation">,</span><span class="token string">"%s&lt;Hello MATLAB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Fmt</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span><span class="token string">"%s&lt;%s=transpose(%s)"</span><span class="token punctuation">,</span>matStringName<span class="token punctuation">,</span>matStringName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Fmt</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span><span class="token string">"%s&lt;%s=char(%s)"</span><span class="token punctuation">,</span>matStringName<span class="token punctuation">,</span>matStringName<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>发送接收函数如下所示</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">SendString</span><span class="token punctuation">(</span>CAObjHandle hMatlab<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>matStringName<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>CVIString<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">GetString</span><span class="token punctuation">(</span>CAObjHandle hMatlab<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>matStringName<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>cString<span class="token punctuation">)</span> result <span class="token operator">=</span> <span class="token function">SendString</span><span class="token punctuation">(</span>hMatlab<span class="token punctuation">,</span> <span class="token string">"matStr"</span><span class="token punctuation">,</span> CVIString<span class="token punctuation">)</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token function">GetString</span><span class="token punctuation">(</span>hMatlab<span class="token punctuation">,</span><span class="token string">"matStr"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>cStr<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>demo给出的例子是，将“Hello MATLAB”字符串转换为双精度浮点数，变量名为CVIString，传输到Matlab中，在Matlab中的名称为matStr，而后从Matlab中获得这个字符串，变量名为cStr。</p><p>在CVI程序中，matStr无需声明，然而CVIString与cStr是需要声明的，形式是一维数组。</p><p>6.发送/接收矩阵</p><p>同5，demo矩阵的传输演示是将一个2x2的矩阵传入Matlab，进行转置运算后接收回来。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">SendMatrix</span><span class="token punctuation">(</span>CAObjHandle hMatlab<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>matlabName<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>matrixReal<span class="token punctuation">,</span>                     <span class="token keyword">double</span> <span class="token operator">*</span>matrixImag<span class="token punctuation">,</span> size_t dim1<span class="token punctuation">,</span> size_t dim2<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">GetMatrix</span><span class="token punctuation">(</span>CAObjHandle hMatlab<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>matlabName<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span><span class="token operator">*</span>matrixReal<span class="token punctuation">,</span>                     <span class="token keyword">double</span> <span class="token operator">*</span><span class="token operator">*</span>matrixImag<span class="token punctuation">,</span> size_t <span class="token operator">*</span>dim1<span class="token punctuation">,</span> size_t <span class="token operator">*</span>dim2<span class="token punctuation">)</span>result <span class="token operator">=</span> <span class="token function">SendMatrix</span><span class="token punctuation">(</span>hMatlab<span class="token punctuation">,</span><span class="token string">"cMatrix"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token operator">*</span><span class="token punctuation">)</span>matrix_r<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token operator">*</span><span class="token punctuation">)</span>matrix_i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> result <span class="token operator">=</span> <span class="token function">GetMatrix</span><span class="token punctuation">(</span>hMatlab<span class="token punctuation">,</span><span class="token string">"mMatrix"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>matrixReal<span class="token punctuation">,</span><span class="token operator">&amp;</span>matrixImag<span class="token punctuation">,</span><span class="token operator">&amp;</span>dim1<span class="token punctuation">,</span><span class="token operator">&amp;</span>dim2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>传输变量包括Matlab句柄，在Matlab中的名称，矩阵实部数值（也是矩阵），矩阵虚部数值（也是矩阵），行数，列数。其中没有虚部或者实部时可以用NULL表示。</p><p>同4，mMatrix与cMatrix无需在CVI中进行声明。但发送矩阵的实部数值matrix_r与虚部数值matrix_i需要在CVI中声明，形式是二维数组。接收矩阵的实部数值matrixReal和虚部数值matrixImag为初始化为NULL的指针，也需要提前声明，行数列数也需要提前确定。</p><p>7.运行M文件脚本：RunMatlabScript</p><p>该函数在matlabutil中定义。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">RunMatlabScript</span><span class="token punctuation">(</span>CAObjHandle hMatlab<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>mFilePath<span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token function">RunMatlabScript</span><span class="token punctuation">(</span>hMatlab<span class="token punctuation">,</span><span class="token string">"G:\\sig_gen\\demo_0728\\create_chaffsig.m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在设定路径时，Windows下的分隔符需使用\\以强制转义，否则会使得路径解析出错，另外由于函数中对路径长度以及文件名长度最大值仅设为256，故运M文件脚本不可设置过深，以防止无法解析。</p><p>另外还可利用FileSelectPopupEx等系统相关的函数，实现选择m文件运行的操作，这里不再赘述。</p><h3 id="调用自定义函数"><a href="#调用自定义函数" class="headerlink" title="调用自定义函数"></a><strong>调用自定义函数</strong></h3><p>若要调用自定义函数，建议采用以下两种方式：</p><p>1.不足5行的函数，直接使用RunMatlabCommand，拆分为多个语句进行代替。</p><p>2.程序较长，但不存在额外调用自定义函数的情况（额外调用自定义函数指：例如本打算调用自定义函数A，A函数中又使用了自定义函数B），则在Matlab中充分测试A函数后，去掉首行的声明（即function [输出变量] = 函数名（输入变量））以及末尾的”end”，将所需要的输入变量提前构成数组，直接传入Matlab，再在Matlab中还原为各参数变量。如下所示：</p><p>在CVI中将变量构成数组</p><pre class=" language-c"><code class="language-c">m_out_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> fc<span class="token punctuation">;</span>m_out_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> fs<span class="token punctuation">;</span>                                                        m_out_data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>m<span class="token punctuation">;</span>                                                m_out_data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> TotalTime<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1e-6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在M文件头部还原</p><pre class=" language-c"><code class="language-c">f0 <span class="token operator">=</span> <span class="token function">m_out_data</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     fs <span class="token operator">=</span> <span class="token function">m_out_data</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     m <span class="token operator">=</span> <span class="token function">m_out_data</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     T <span class="token operator">=</span> <span class="token function">m_out_data</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     </code></pre><p>完成运算后再将所需要的数据导出，由于一般调用Matlab的原因是C语言计算信号的各种变换较慢，所以所需数据一般也为行向量，可以用1xN的矩阵表示。</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a><strong>小结</strong></h3><p>调用Matlab时，需要在CVI代码中首先加载Matlab，其次具有一定的技巧地使用自定义函数，最后调用完成后需关闭Matlab避免拖累系统。</p><h1 id="三、测试结果"><a href="#三、测试结果" class="headerlink" title="三、测试结果"></a>三、测试结果</h1><p>在同一计算机上进行相同计算任务，</p><p>按上文的思路，CVI使用原方法完成50*245000个循环，耗时100s左右。</p><p>Matlab环境下运行（也是两重循环），耗时60s</p><p>Matlab改为单循环时，耗时0.0648s</p><p>CVI与Matlab进行混合编程后，耗时不足2s。</p><p>由上可知，混合编程成功地优化了功能，体现了混合编程的优越性。</p><hr><h1 id="待改进之处"><a href="#待改进之处" class="headerlink" title="待改进之处"></a><strong>待改进之处</strong></h1><p>后续打算对另外两种调用方法，以及通过修改Matlab注册码使用ActiveX服务三个方面进行研究，并尽快完善本文。</p><hr><p>参考资料</p><p>刘君华等，《基于LabWindows/CVI的虚拟仪器设计》，电子工业出版社</p><p>LabWindows/CVI 自带的Sample</p><br>本文所述工程已上传到Github，[点我跳转本文实例代码](https://github.com/daewis/CVIdemo4MixPrograming)<br>如有疑问，欢迎留言。]]></content>
      
      
      <categories>
          
          <category> 混合开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> LabWindows/CVI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ClIon的CMake、MinGW与Cygwin配置简易指南</title>
      <link href="/2018/06/18/2018-06-18-c-compile-envn-build/"/>
      <url>/2018/06/18/2018-06-18-c-compile-envn-build/</url>
      
        <content type="html"><![CDATA[<p>Clion是捷克公司JetBrains出品的JB全家桶之中主要面向C、C++的集成开发环境。JB家的Pycharm和IDEA是其最为出名的两款，而我也是从Pycharm入的坑。因为近期想再把C捡起来复chong习xin复xue习xi，在网上看了好些相关IDE推荐，最后还是选择Clion。</p><p>Clion与CodeBlocks等不太一样的地方在于，官方允许基于MinGW、Cygwin与VisualStudio三种工具链进行设置，在此仅对前两种进行介绍。</p><hr><p>硬件配置：Dell游匣笔记本7559，CPU:i5-6300HQ，内存：8G。</p><p>系统配置：Win10专业版1803</p><p>软件配置：JetBrains Clion 2018.1.3    </p><p><a href="https://jaist.dl.sourceforge.net/project/mingw/Installer/mingw-get-setup.exe" target="_blank" rel="noopener">MinGW</a> 2013-10-26    </p><p><a href="https://cygwin.com/ml/cygwin-announce/2018-02/msg00002.html" target="_blank" rel="noopener">Cygwin</a> 2.10.0    </p><p><a href="[https://cmake.org/download/](https://link.jianshu.com/?t=https%3A%2F%2Fcmake.org%2Fdownload%2F)">CMake</a>3.11.4</p><hr><p>首先安装CMake、Cygwin与MinGW。</p><h5 id="CMake安装"><a href="#CMake安装" class="headerlink" title="CMake安装"></a>CMake安装</h5><p>其中CMake是最容易也最傻瓜的。搜索官网，下载对应平台的版本，这里建议直接下载.msi的安装版而非.zip的绿色版，从而免除手动配置环境变量。简单地说就是勾选同意协议、将CMake添加到面向所有使用者的系统路径(Add CMake to the system PATH for all users)。安装路径可根据自己需要修改。随后next即可。</p><p>正确安装后，在命令行输入<code>cmake</code>会弹出如下界面:<br><img src="https://img-blog.csdn.net/20180618133748782?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h5 id="MinGW安装"><a href="#MinGW安装" class="headerlink" title="MinGW安装"></a>MinGW安装</h5><p>从官网先下载好安装的下载器，需要设置如下所示的版本、基于的架构等。<br><img src="https://img-blog.csdn.net/20180618133910549?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br><img src="https://img-blog.csdn.net/2018061813381987?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>next后则可设置安装目录，个人喜欢在D盘下新建一个MinGW文件夹，这样方便管理与查找。</p><p><img src="https://img-blog.csdn.net/20180618133836852?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>接下来一路next即可。</p><p>在桌面上会出现一个下图所示图标，双击即可进入MinGW的包管理。</p><p><img src="https://img-blog.csdn.net/20180618133927844?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>安装界面如下所示，</p><p><img src="https://img-blog.csdn.net/20180618134042521?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>此处我们以Basic Setup中的mingw32-base为例介绍安装流程。</p><p>点击左侧的Basic Setup，鼠标移动至mingw32-base处，右键选中Mark for Installation，如下图所示。</p><p><img src="https://img-blog.csdn.net/20180618134156111?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>属性栏有Package（包名）、Class（类别，一般需要选择bin与dev的）、InstalledVersion（安装版本，仅勾选后才会显示）、Repository Version（与前者类似）、Describtion（说明，对包的用途进行简单介绍）</p><p>再点击左侧菜单栏中的Installation，下拉选中Apply Changes，会弹出如下所示的窗</p><p><img src="https://img-blog.csdn.net/20180618134222467?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>点击Apply，随后软件自动进行下载安装，完成后也会弹出类似日志的细节提示，说明哪些压缩包已被安装。</p><p><img src="https://img-blog.csdn.net/20180618134231800?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br><img src="https://img-blog.csdn.net/20180618134238669?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br><img src="https://img-blog.csdn.net/20180618134245914?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>若要进行C/C++开发，原则上需要安装的MinGW包如下所示</p><pre><code>Basic Setup部分mingw32-basemingw32-gcc-g++All Packages部分主要集中在MinGW Base System分支下勾选需注意classmingw32-gcc            c编译器mingw32-gcc-g++        c++编译器mingw32-gdb            debugger</code></pre><p>验证是否安装成功，则可以在命令行中输入<code>gcc</code></p><p>出现下述界面即说明安装成功。<br><img src="https://img-blog.csdn.net/20180618134304509?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h5 id="Cygwin安装"><a href="#Cygwin安装" class="headerlink" title="Cygwin安装"></a>Cygwin安装</h5><p>相对而言Cygwin安装是最麻烦的，因为本身Cygwin就是许多自由软件的集合，在Windows上运行类UNIX系统。体积和规模就比MinGW与CMake大了不少。</p><p>Cygwin安装方法类似MinGW，从官网下载下来后直接打开，一路next，中间会需要选择下载方式，一般选择Install from Internet（即第一种），然后选择ROOT的安装目录（此处照旧新建Cygwin然后把东西扔里面），接下来需要选择安装包的本地下载位置，此处新建一个IDM文件夹然后选择它，对于选择连接方式，默认直连，短暂跳过一个页面后，会出现下载地址的选择，一般来说国内公网选择163的站点没问题，网易的<a href="http://mirrors.163.com/.help/cygwin.html" target="_blank" rel="noopener">Cygwin镜像使用帮助</a>对使用说明进行了详细的介绍，阅读并跟随操作即可，教育网则可选择清华TUNA源、中科大源等高校镜像站点，使用VPN的用户建议根据目标国家进行选择，或暂时退出VPN。</p><p>然后就会自动进入下一步，弹出选择窗口。在搜索小窗处输入gcc-core、gcc-g++、make、gdb、binutils，并在devel下点击skip，在Bin属性下出现勾选的方框即可。</p><p>若有其他需求，则根据需要搜索相对应的包并安装，例如笔者就额外增加并安装了Python模块、net下的openssl、openssh等，此处增加的包/模块越多，安装的时间也就越长。</p><p>接下来就是漫长的等待，其需要经历下载——安装——启动三个阶段。</p><p>完成后会自动勾选Create icon on Desktop，点击完成即可。</p><h5 id="Clion安装与配置"><a href="#Clion安装与配置" class="headerlink" title="Clion安装与配置"></a>Clion安装与配置</h5><p>接下来就是最重要的ClIon安装配置。</p><p>安装很简单，例行配置目录以及启动项。关键是配置，JB家软件的配置逻辑基本都是先进行主题配置再进行运行相关的配置。</p><p>UI主题根据爱好选择Decula或者InteliJ，这里我选择后者。</p><p>然后就进入工具链设置。</p><p><img src="https://img-blog.csdn.net/20180618134436725?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>首先设置MinGW的，左侧点击加号，环境选择MinGW，点击右侧的按钮，将MinGW文件夹设为目标路径。</p><p>然后照例设置CMake、Make、C Compiler和C++ Compiler。其中由于MinGW的Make可执行程序名字为mingw32-make.exe，故复制一个副本然后更名为Make.exe，Make的路径直接选中它。</p><p>设置好MinGW的文件路径后，软件会自动探测对应Make、C Compiler和C++ Compiler的可执行程序，但速度略慢，可等待也可手动选择。</p><p>设置完成后，可对语言插件进行设置，这里只设置Markdown的支持，其他保持默认状态。</p><p>下面进行HelloWorld测试</p><p>新建一个工程，直接Run</p><p><img src="https://img-blog.csdn.net/20180618134523131?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>顺利输出Hello，world!</p><p><img src="https://img-blog.csdn.net/20180618134531105?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>设置Cygwin的配置</p><p>大体类同于MinGW，在菜单栏中选中File，单击Settings，则会弹出一个窗口，选择Build,Execution，Deployment分支，点击下属的Toolchains则会弹出刚才设置MInGW的窗口。</p><p><img src="https://img-blog.csdn.net/20180618134958947?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>点击+号，依次对Enviroment类型、路径，以及CMake、Make、C Compiler、C++ Compiler以及Debugger进行设置，其中一旦设置了Enviroment的路径，CMake与Debugger则会自动选中（即CMake可不使用额外安装的版本，而且Cygwin下使用额外安装的CMake会弹出警告提示），设置完毕后可点击左侧的向上箭头将Cygwin设为默认选项</p><p>下面进行输出测试</p><p>新建一个工程，直接Run</p><p><img src="https://img-blog.csdn.net/20180618134835582?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br><img src="https://img-blog.csdn.net/20180618135026142?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMjMyOTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>顺利输出Hello，Louis!</p><p>至此基本配置完成。</p>]]></content>
      
      
      <categories>
          
          <category> IDE配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫实战【2】：自定义年月日国别抓取Bing壁纸</title>
      <link href="/2017/08/10/2017-08-10-python-spider-deskpic/"/>
      <url>/2017/08/10/2017-08-10-python-spider-deskpic/</url>
      
        <content type="html"><![CDATA[<p>今天写完程序的最深体会。</p><p>就是大概我python水平可能也就停留在这半死不活，写几十行都要各种翻资料的low B level上了吧。</p><p>令人悲伤。</p><p>言归正传，<a href="https://github.com/daewis/scrapy-collection/blob/master/bing_wallpaper/main.py" target="_blank" rel="noopener">代码地址</a>。</p><p>Bing壁纸有API接口，也有不同网站提供浏览服务，其中本例使用的是<a href="http://www.istartedsomething.com/" target="_blank" rel="noopener">Long Zheng</a>老师的<a href="http://www.istartedsomething.com/bingimages/" target="_blank" rel="noopener">bing image archive</a> 。</p><p>Bing image archive提供来源多达10个国家的Bing首页壁纸，其中每天中有重复的部分，也有某个国家独有一张的情况。</p><p>主要思路：追踪两个URL链接，一个是image archive可以定位到某年某月某天某国家Bing首页壁纸的网址（后续称为壁纸网址），另一个为存放图片的链接（后续称为图片链接）。利用requests库获取存放图片链接URL的HTML代码，在本地写出，保存即可。</p><p>本例一共使用五个函数：</p><p>main为主函数，负责输入自定义的年月日以及国家类别，其中国家类别由1-10的数值指代。输入后调用其余四个函数进行处理，最终输出”Download successful”。</p><p>updateurl负责拼接字符串，传递由年月日组成的参数以及壁纸网址，以供后续文件命名使用。</p><p>phantomjs_req负责使用带有header请求头的Phantom JS无界面浏览器访问壁纸网址，返回其HTML源码。</p><p>parse_html负责解析源码，使用正则表达式抽取源码中的网址列表，经验证，列表最后一个元素一般均为图片链接，抽取保存为新URL，截取其中表示分辨率的部分并分别返回残缺的URL以及最大分辨率。（其中uk与gb分别表示英国以及不列颠两个“分别的国别”。由于未知原因，在某些日期中，uk没有图片而gb有，故可能会返回“’bing.com’ is not in list”错误）</p><p>download负责选择喜好的分辨率类型，拼接成目标图片的url并下载，以“年月日国别@分辨率.jpg”的文件名保存。（其中选择分辨率的功能待完善，Long 叔的网站并没有缓存那么多中分辨率的图片。。）</p><p>整个程序正常耗时十余秒即可下载保存一张自定义年月日国别的Bing壁纸了。</p><h3 id="To-do-list"><a href="#To-do-list" class="headerlink" title="To do list"></a>To do list</h3><p>每次的To do list我怎么觉得都是给自己挖坑然后根本不填。。。</p><p>1.输入年月日时无异常处理功能，如果有需要可进行添加。</p><p>2.自定义分辨率功能有待完善，初步思路是继续寻找资料以确定已知图片URL后如何拼接成Bing服务器存放图片的链接。</p><p>大概就是这样了吧。</p><h3 id="多余的话"><a href="#多余的话" class="headerlink" title="多余的话"></a>多余的话</h3><p>有多少人能找个自己喜欢做的工作呢？许多人还不是把它当做谋生的工具罢了。</p><p>如果你是这样的状态，那就十分恭喜你了。</p><p>化用金庸在《倚天屠龙记》中的一句话：</p><p>前二十余年看过诸多对于人生艰难的描写，书中写得太也肤浅了，真实人生中不是这样的。因为那时候我还不明白。</p><p>参考资料</p><p><a href="https://github.com/xCss/bing" target="_blank" rel="noopener">bing壁纸API</a></p><p><a href="https://www.zhihu.com/question/20583304/answer/149274928" target="_blank" rel="noopener">吴想在知乎问题“喜欢必应的首页图片，有什么办法下载下来作为壁纸用？”下的回答</a></p><p><a href="http://tool.oschina.net/regex#" target="_blank" rel="noopener">开源中国正则表达式在线工具</a>   <del>真是羞耻</del></p>]]></content>
      
      
      <categories>
          
          <category> Python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vivado安装教程补丁</title>
      <link href="/2017/08/05/2017-08-05-vivado-setup-tutial/"/>
      <url>/2017/08/05/2017-08-05-vivado-setup-tutial/</url>
      
        <content type="html"><![CDATA[<p>最近开始搞FPGA，用的Xilinx公司的板子，写Verilog，自然也就得用Xilinx自家的软件Vivado，版本2015.4。</p><p>安装配置网上也挺多教程的，选了个CSDN上的参考了下 <a href="http://blog.csdn.net/taowei1314520/article/details/74860356" target="_blank" rel="noopener">VIVADO 安装教程</a>这个教程。</p><p>在添加license后这步，我使用的是<a href="http://download.csdn.net/detail/onionlin/9609751" target="_blank" rel="noopener">vivado长期有效license</a>这个，确保不会因为license问题导致后续编译出错。</p><p>然后下载<a href="http://download.csdn.net/detail/xfreestar/9396610" target="_blank" rel="noopener">vivado.2015.4.1.win64 license</a>这个资源，解压后将vivado文件夹下lib文件夹中的文件复制到安装路径下，重启软件。</p><p>如果是2016.1之后版本的Vivado，可以参考下<a href="http://www.openhw.org/module/forum/thread-657954-1-1.html" target="_blank" rel="noopener">【入门必看】学习Vivado如何获取License</a>这个指南，并没有使用过，无法验证其可靠性。</p><p>分享两个代码段，分别是《Xilinx FPGA设计权威指南 Vivado集成设计环境》一书中第二章的设计代码以及测试代码，经验证在2015.4版本的vivado上测试通过，可以来验证自己软件的安装配置是否正确。</p><p>top.v 设计代码</p><pre class=" language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">top</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> a<span class="token punctuation">,</span>    <span class="token keyword">input</span> b<span class="token punctuation">,</span>    <span class="token keyword">output</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> z    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assign</span> z<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token operator">&amp;</span>b<span class="token punctuation">;</span><span class="token keyword">assign</span> z<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assign</span> z<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token operator">|</span>b<span class="token punctuation">;</span><span class="token keyword">assign</span> z<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span>a<span class="token operator">|</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assign</span> z<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span><span class="token keyword">assign</span> z<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token operator">~^</span>b<span class="token punctuation">;</span><span class="token keyword">endmodule</span><span class="token keyword">endmodule</span></code></pre><p>test.v 测试代码</p><pre class=" language-verilog"><code class="language-verilog"><span class="token keyword">module</span> test<span class="token punctuation">;</span><span class="token keyword">reg</span> a<span class="token punctuation">;</span><span class="token keyword">reg</span> b<span class="token punctuation">;</span><span class="token keyword">wire</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> z<span class="token punctuation">;</span>top <span class="token function">uut</span><span class="token punctuation">(</span>    <span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">z</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">initial</span><span class="token keyword">begin</span>    <span class="token function">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">begin</span>            a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">#100</span><span class="token punctuation">;</span>            a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">#100</span><span class="token punctuation">;</span>            a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">#100</span><span class="token punctuation">;</span>            a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">#100</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> IDE配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
            <tag> Vivado </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium+PhantomJS自动化测试应用</title>
      <link href="/2017/07/05/2017-07-05-python-selenium-phantomjs-auto-test/"/>
      <url>/2017/07/05/2017-07-05-python-selenium-phantomjs-auto-test/</url>
      
        <content type="html"><![CDATA[<p>在前文<a href="http://blog.csdn.net/u013023297/article/details/74178115" target="_blank" rel="noopener">Tomcat+JSP+Oracle信息查询系统开发笔记（3）</a>中我们已经搭建好了供使用的IP信息查询系统，在发布上线给更多人使用前，我们需要对其进行测试，以确保其稳定可靠。</p><p>在本例中，由于系统较为简单，我们仅对其进行功能测试，即像用户那样进行输入、点击操作，观察其是否返回正确的输出即可。但由于数据库为百万量级，不适合人工进行测试，宜采用自动化测试方法。</p><p>在自动化测试领域内，Selenium是一件使用广泛的工具，除了测试，爬虫也经常用到它，且其不仅限于Python语言。这里推荐虫师的《selenium2 Python自动化测试实战》，快速掌握Python上的selenium使用方法。</p><p>由于是对基于web的查询系统进行测试，故还需要PhantomJS这个headless浏览器以模拟用户的真实操作过程，下载并解压文件夹，将PhantomJS.exe所在文件夹加入环境变量中即可使用。本来我打算使用Firefox或者Chrome实体浏览器以进行测试的，但调用实体浏览器耗时，且在开发过程中我遇上了输入表单后提交失败的bug，虽然推断出可能由于输入后界面刷新或渲染所致，但一直无法解决，无奈改换PhantomJS进行模拟。</p><p>整个测试使用Python2开发，脚本运行流程如下：</p><ol><li>输入sql存储的文件夹路径，生成sql文件列表</li><li>输入序号选取sql文件，指定IP抽取数目</li><li>生成抽取出的IP列表，保存为csv文件并输出抽取过程耗时，单位为秒</li><li>读取IP列表，启动模拟浏览器，重复进行IP地址输入、提交、返回提交后的页面源码、统计页面中涉及数据库个数（最大值为5）并返回，每完成一个即输出该条IP处理完成记录</li><li>关闭模拟浏览器，将每次返回的记录输出为log日志文件</li><li>输出整个测试总耗时，单位为s</li></ol><p>测试输入如图所示：</p><p><img src="http://img.blog.csdn.net/20170705172528866?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzAyMzI5Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>中间记录省略<br><img src="http://img.blog.csdn.net/20170705172617813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzAyMzI5Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>输出文件示例：</p><p>IP地址文件：文件名为数据库+抽取时间.csv</p><blockquote><p>,ip<br>0,1.4.72<br>1,1.26.147<br>2,1.14.83<br>3,1.30.68<br>4,1.51.98<br>5,1.51.154<br>6,1.57.182<br>7,1.58.110<br>8,1.60.15<br>9,1.60.57</p></blockquote><p> 测试日志文件：文件名为autotest+抽取时间.log</p><blockquote><p>No.0 is finished, recorded in 5 database<br>No.1 is finished, recorded in 5 database<br>No.2 is finished, recorded in 5 database<br>No.3 is finished, recorded in 5 database<br>No.4 is finished, recorded in 4 database<br>No.5 is finished, recorded in 5 database<br>No.6 is finished, recorded in 5 database<br>No.7 is finished, recorded in 5 database<br>No.8 is finished, recorded in 5 database<br>No.9 is finished, recorded in 5 database</p></blockquote><p>算是第一个主要是自己写的、上了一百行的程序= =从昨天开始整合、调bug、加功能，弄到内牛满面。</p><p>函数块功能都很简单，很容易就能看懂，其中抽取部分可详见<a href="http://blog.csdn.net/u013023297/article/details/74202925" target="_blank" rel="noopener">Python自动化脚本【2】从sql文件中随机抽取条目</a>一文。</p><h3 id="记录一下踩的坑以及小tips"><a href="#记录一下踩的坑以及小tips" class="headerlink" title="记录一下踩的坑以及小tips"></a>记录一下踩的坑以及小tips</h3><ol><li>Python2的中文编码：神坑不解释，主要体现在文件夹路径读取以及统计中。最好代码存放路径，以及程序访问的文件夹路径均为全英文名。</li><li>网页访问中，注意frame以及框架的存在，否则定位时会因返回空值而报错。</li><li>Python2中raw_input与input的不同，raw_input将所有字符按字符串读取，返回字符串类型，而input只接收数字，返回int或float类型。在最后整合中，由于将读取指定抽取数目的语句写为raw_input且未更改变量类型，导致抽取数目失控，极大影响了程序运行时间。</li><li>PhantomJS的优化，参考了<a href="https://thief.one/2017/03/01/Phantomjs%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/" target="_blank" rel="noopener">【phantomjs系列】Selenium+Phantomjs性能优化</a>一文，将PhantomJS开关的操作放在页面读取外面，节约了时间，提高了一定性能。</li><li>更多的小坑记不清了。。。</li></ol><h3 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO LIST"></a>TODO LIST</h3><p>更准确滴说是今后写测试脚本需要注意并完成的部分。</p><ol><li>目前的IP地址为从数据库中抽取出的值，可否考虑自行生成IP地址以进行测试。</li><li>程序中严重缺乏异常处理代码（主要也因为我目前水平太渣），包括并不限于：路径不存在时进程的中止跳出，大量条目进行处理中某个条目处理出错，记录处理异常并跳过以处理下一个条目等等。</li><li>测试正常以及异常记录的可视化。</li></ol><p>参考链接：</p><p><a href="http://blog.csdn.net/suibianshen2012/article/details/51378948" target="_blank" rel="noopener">python2.x和python3.x中raw_input( )和input( )区别</a></p><p><a href="http://simon-zzm.blog.163.com/blog/static/88809522201148102914827/" target="_blank" rel="noopener">python查找目录下指定文件</a></p><p><a href="https://thief.one/2017/03/01/Phantomjs%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/" target="_blank" rel="noopener">【phantomjs系列】Selenium+Phantomjs性能优化</a></p>]]></content>
      
      
      <categories>
          
          <category> Python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Automation </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python自动化脚本之从sql文件中随机抽取条目</title>
      <link href="/2017/07/03/2017-07-03-python-autostript-2-random-select-item/"/>
      <url>/2017/07/03/2017-07-03-python-autostript-2-random-select-item/</url>
      
        <content type="html"><![CDATA[<p>这个小脚本的本意是为前述的查询系统自动化测试而写的数据预处理程序，然而弱鸡如我没有完成整个自动化测试的项目，程序屡屡在自动填入表单部分并提交这步失败，所以只剩从sql文件中自动随机提取条目这个小脚本值得记录一发了。</p><p>前面的开发笔记中提到，查询系统中，填入的表单为IP地址的前三段。故需要从sql文件中匹配恰当的IP字段+抽取并保存生成新的文件，每次抽取100条（参数可改），保存的文件名为cnnic+处理完成的时间点，其中时间点精确到秒。</p><p>代码地址 <a href="https://github.com/daewis/Automate/blob/master/itemselect%20v1.0.py" target="_blank" rel="noopener">itemselect</a>，使用Python2.7开发。</p><p>本来其实从数据库中抽数据，直接连接数据库然后select…from..就行了。然而搜索了半天发现Python链接Oracle数据库的操作极其麻烦，还得装Oracle客户端，单位用的是PL/SQL，遂作罢。链接MySQL倒是很简单，然而我又没有服务器上MySQL的账户。于是想到从PL/SQL中把数据库导出为sql文件然后再进行抽取，反正数据库也不是很大，每个数据库也就一两百万条，均小于700M。</p><p>首先观察一下sql文件的特点。</p><pre class=" language-sql"><code class="language-sql">prompt PL<span class="token operator">/</span>SQL Developer <span class="token keyword">import</span> <span class="token keyword">file</span>prompt Created <span class="token keyword">on</span> <span class="token number">2017</span>年<span class="token number">6</span>月<span class="token number">14</span>日 <span class="token keyword">by</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">set</span> feedback <span class="token keyword">off</span><span class="token keyword">set</span> define <span class="token keyword">off</span>prompt Disabling triggers <span class="token keyword">for</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">disable</span> <span class="token keyword">all</span> triggers<span class="token punctuation">;</span>prompt Deleting <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">delete</span> <span class="token keyword">from</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span>prompt Loading <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token punctuation">(</span>IP<span class="token punctuation">,</span> PROVINCE<span class="token punctuation">,</span> CITY<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'1.3.111.1'</span><span class="token punctuation">,</span> <span class="token string">'广东'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token punctuation">(</span>IP<span class="token punctuation">,</span> PROVINCE<span class="token punctuation">,</span> CITY<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'1.3.112.1'</span><span class="token punctuation">,</span> <span class="token string">'广东'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token punctuation">(</span>IP<span class="token punctuation">,</span> PROVINCE<span class="token punctuation">,</span> CITY<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'1.3.113.1'</span><span class="token punctuation">,</span> <span class="token string">'广东'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token punctuation">(</span>IP<span class="token punctuation">,</span> PROVINCE<span class="token punctuation">,</span> CITY<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'1.3.114.1'</span><span class="token punctuation">,</span> <span class="token string">'广东'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token punctuation">(</span>IP<span class="token punctuation">,</span> PROVINCE<span class="token punctuation">,</span> CITY<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'1.3.115.1'</span><span class="token punctuation">,</span> <span class="token string">'广东'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面的这段即为某数据库导出的sql文件前20行，敏感信息已马赛克，可以看出数据信息主要以</p><pre><code>insert into ******* (IP, PROVINCE, CITY)values (&#39;1.3.115.1&#39;, &#39;广东&#39;, null);</code></pre><p>这类语句存储，星号为数据库名，括号内为类别名称，第二行则为每个类别对应的值。</p><p>既然需要抽取IP地址的前三段，则使用“\d{1,3}.\d{1,3}.\d{1,3}”这一正则表达式即可提取有效字段。</p><p>接下来详解每段的操作：</p><p>1.引入库并读取sql文件：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> timepath <span class="token operator">=</span> <span class="token string">'G:\顾鹏程\ipinfo\data\ipinfo-cnnic.sql'</span>unipath <span class="token operator">=</span> unicode<span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>inputfile<span class="token operator">=</span>open<span class="token punctuation">(</span>unipath<span class="token punctuation">)</span></code></pre><p>re正则表达式库，numpy，pandas数据分析利器，time时间库。</p><p>路径使用绝对路径，由于路径中包含有中文字符且Python2对中文支持不好，加了一条编码命令，随后再打开文件。</p><p>后面用了个try,finally结构，理了一下逻辑（虽然好像也没什么暖用），try块中主要进行随机抽取并且组合新列表的操作，finally块中进行时间显示，列表转换以及文件保存操作。</p><p>2.抽取：</p><pre class=" language-python"><code class="language-python">n<span class="token operator">=</span><span class="token number">0</span>ipinfo<span class="token operator">=</span>inputfile<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>pat<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\d{1,3}\.\d{1,3}\.\d{1,3}'</span><span class="token punctuation">)</span>    ip_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>timea<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> a <span class="token keyword">in</span> ipinfo<span class="token punctuation">:</span>    t<span class="token operator">=</span>int<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    i1<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>    t<span class="token operator">=</span>i1<span class="token operator">+</span>t    i2<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i1<span class="token punctuation">)</span>    <span class="token keyword">for</span> ip <span class="token keyword">in</span> pat<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>t<span class="token operator">%</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">:</span>            ip_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>            n<span class="token operator">+=</span><span class="token number">1</span>          timeb<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>随机抽取的算法实现原理为取随机数i1,i2,时间戳t，并由三者之间的算数关系确定抽取操作的进行与否。时间戳t为一较大的整数，随着程序运行不断变化；i1为人为限制在500~1000之间的一随机整数，取值后变量t为时间戳加上这个随机整数；i2为小于i1大于0的另一随机整数。t，i1，i2均为随机数，对于百万大小的数据库而言，t除以i1所得值恰好为i2的概率较小，从而保证了隔行取值的随机性。</p><p>然而本算法难以保证覆盖得了所有的条目，亦难以保证不会出现溢出。需要使用数学方法以确认覆盖行数。</p><p>3.表格转换以及文件保存：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token string">'Process is finished!\nAnd the total time is '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>round<span class="token punctuation">(</span><span class="token punctuation">(</span>timeb<span class="token operator">-</span>timea<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'s'</span>inputfile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>iplist<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>ip_list<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'ip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>timeloc<span class="token operator">=</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H.%M.%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>name <span class="token operator">=</span> <span class="token string">'cnnic_'</span><span class="token operator">+</span>timeloc<span class="token operator">+</span><span class="token string">'.csv'</span>iplist<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>name<span class="token punctuation">)</span></code></pre><p>这段就较为简单了。</p><p>首先输出整个抽取的运行时间，单位为s，保留两位小数。某次实验中，抽取10个条目时，总耗时38.25s，抽取100个时，总耗时23.83s。两者差距较大，具体原因有待进一步分析。</p><p>接下来将上面组合的列表ip_list转换为pandas中的dataframe格式，并以“年-月-日 时.分.秒”的格式将时间记录为字符串，由于文件名中不可出现冒号，故使用点号代替。</p><p>最后将数据库名与时间拼接为文件名，将dataframe输出为csv文件。 </p><p>总结：</p><ol><li>文件处理的脚本编写，需要较为熟悉time、sys等原生库，需要对文件读取与写出熟悉。</li><li>数学的重要性，不仅体现在算法的优化上。如本文中对大量数据进行随机抽取操作，既需要尽量保证所抽取的样本覆盖了全部数据，也需要保证遍历过程中不发生溢出错误。</li><li>也是最近才深有体会的，不管是否是计算机科班出身，写代码这种事，如果想要熟练还得天天写，计算机语言也是一门语言，许久不用，自然也会遗忘荒废。学一门语言也需要深到一定程度方可换一门继续学习，过程中也得有意识地进行区分，不然也会如一些日语专业学生讲不好英语一般，遗憾万分。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Automation </tag>
            
            <tag> File Process </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat+JSP+Oracle开发笔记（3）</title>
      <link href="/2017/07/03/2017-07-03-tomcat-jsp-oracle-dev-note-system/"/>
      <url>/2017/07/03/2017-07-03-tomcat-jsp-oracle-dev-note-system/</url>
      
        <content type="html"><![CDATA[<p>上一篇讲解了数据库链接的实现，本篇将讲解查询系统的搭建以及demo实现。</p><p>作为一个较为简单的查询系统，结构也十分简洁。整个系统运行流程如下图所述。</p><p><img src="https://ooo.0o0.ooo/2017/07/03/5959a3dd01b8c.png" alt="流程图"></p><p>分析上述流程，可以将系统划分为三部分：输入、查询、表格绘制。</p><p> 输入的表单由输入部分提交至查询部分有若干种实现方法，最为简单的一种即为在form标签中加入action属性，值设置为查询部分所在的页面，若输入与查询处于同一个页面，则不会出现页面跳转，反之则会出现页面跳转。</p><p>目前查询系统基本都为不跳转形式，且输入部分极为简单，本项目中将输入部分的代码嵌入查询及绘制页面，使其共存在同一jsp文件中，action值为本页面，即将表单提交到本页（本项目中为search.jsp），如下所示。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search.jsp<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form2<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">150</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ip<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ip<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入IP地址的前三段<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                &lt;button id= 'buttom' type="submit">提交查询<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>功能部分实现完成后，浏览一下界面发现比较简陋，若仅限本人使用，我倒不是很在意，不过这个查询系统是供给一个项目使用的，所以还需要做一定的美化。</p><p>本例中，UI使用HTML提供的框架功能，将网页分为上中下三个子页面。中间的页面则为功能部分的search.jsp，上下分别为head.jsp以及foot.jsp，从单位过往项目中提取出页头以及页脚子页面。</p><p>框架部分代码如下</p><pre class=" language-html"><code class="language-html">&lt;%@ page language="java" import="java.util.*" pageEncoding="UTF-8"%><span class="token doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>styles/global.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>IP信息查询平台<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frameset</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>114,*,30<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">framespacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>head.jsp<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>topFrame<span class="token punctuation">"</span></span> <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">noresize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>noresize<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>topFrame<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>页头<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frameset</span>  <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span>  <span class="token attr-name">framespacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middlezone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search.jsp<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">noresize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>noresize<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>查询界面<span class="token punctuation">"</span></span> <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>frameset</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>foot.jsp<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottomFrame<span class="token punctuation">"</span></span> <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">noresize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>noresize<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottomFrame<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>页脚<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>frameset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noframes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noframes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>至此，整个系统搭建完成，共计4个页面，分别为前端显示页面mainFrame.jsp，页头子页面head.jsp，查询页面search.jsp，页脚子页面foot.jsp。</p><p>demo使用流程如下图所示。</p><ol><li>初始界面</li></ol><p><img src="https://ooo.0o0.ooo/2017/07/03/5959aecdf2e35.png" alt="初始界面"><br>2.    输入表单<br><img src="https://ooo.0o0.ooo/2017/07/03/5959af0539dcd.png" alt="输入表单"><br>3.    输出结果<br><img src="https://ooo.0o0.ooo/2017/07/03/5959af246c66a.png" alt="输出结果"></p><p>至此，整个项目的开发过程已全部记录完毕。很简单的一个系统，可能对于计算机科班的小伙伴来说也就是几个小时的工作量，但对于我这个业余的爱好者，每步都充满着艰辛，从最开始在本机上搭建Tomcat失败，到自以为调教好页面然而一启动Tomcat就花式报错，再到改表格的标签参数发现似乎并没有什么暖用，一路走来还是蛮多感慨。作为在CNNIC实习期间经手的唯一个像模像样的项目，它锻炼了我多方面的能力，找开源代码、教程的能力，调bug的能力，以及一点点写测试的能力（虽然最后并没有实现对这个查询系统进行自动化测试过程）。一直以为，对我而言能力提高最快的外部条件，就是难度适中的项目和恰到好处的deadline，很感谢分配给我这个项目的陈勇老师，也很感谢这次实习机会。</p>]]></content>
      
      
      <categories>
          
          <category> Web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web development </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat+JSP+Oracle开发笔记（2）</title>
      <link href="/2017/06/11/2017-06-11-tomcat-jsp-oracle-dev-note-database/"/>
      <url>/2017/06/11/2017-06-11-tomcat-jsp-oracle-dev-note-database/</url>
      
        <content type="html"><![CDATA[<p>上一篇讲解了Tomcat的安装以及配置，本篇讲解查询系统中核心部分，数据库链接以及查询操作的实现。</p><p>由于数据库操作部分为java而非HTML/javascript，所以需要在页面开头处写入以下代码。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.*"</span> pageEncoding<span class="token operator">=</span><span class="token string">"GBK"</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page  <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.sql.Connection"</span> <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.sql.ResultSet"</span> <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.sql.SQLException"</span> <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.sql.Statement"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>String path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String basePath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"://"</span><span class="token operator">+</span>request<span class="token punctuation">.</span><span class="token function">getServerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>request<span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>path<span class="token operator">+</span><span class="token string">"/"</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">></span></code></pre><p>在HTML页面中嵌入java代码需要用&lt;% %&gt;包裹起来，上述代码的功能是引入java关于数据库操作的库。</p><p>一般查询操作页面虽然也以.jsp后缀名保存，但不显示在前台。并且页面中几乎都为java代码，所以HTML代码部分可省略至仅保留<HTML><body>两个标签。</p><p>接下来讲解链接数据库以及进行查询、显示操作的java代码。</p><pre class=" language-java"><code class="language-java"> Connection con<span class="token punctuation">;</span> Statement stmt<span class="token punctuation">;</span> ResultSet rs<span class="token punctuation">;</span></code></pre><p>声明后面会使用的变量。否则会出错。</p><p>为了保证代码能处理异常，需要引入try/catch结构，如下图所示。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>  out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'all is well'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>引入Oracle的jdbc驱动，并取得所连接到的数据库的url，数据库名称，登录用户名以及密码。其中url信息可在本机Oracle安装文件夹下找到。</p><pre class=" language-java"><code class="language-java"> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"oracle.jdbc.driver.OracleDriver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">oracle<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>OracleDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> String dbUrl<span class="token operator">=</span><span class="token string">"jdbc:oracle:thin:@1.1.1.1:1521:dbl"</span><span class="token punctuation">;</span> String dbUser<span class="token operator">=</span><span class="token string">"god"</span><span class="token punctuation">;</span> String dbPwd<span class="token operator">=</span><span class="token string">"god"</span><span class="token punctuation">;</span> con<span class="token operator">=</span>java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>dbUrl<span class="token punctuation">,</span>dbUser<span class="token punctuation">,</span>dbPwd<span class="token punctuation">)</span><span class="token punctuation">;</span> stmt<span class="token operator">=</span>con<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>本身开发的这个信息查询系统是关于ipv4地址信息的，输入一个ip地址，输出数据库中若干个表中的isp信息，省市信息。其中ip地址只需要输入前三段，因数据库中的ip地址最后一段均为1，对传入的ipname进行字符串处理以其为条件进行查询操作。</p><pre class=" language-java"><code class="language-java">  String ipname <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"ip_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ipname <span class="token operator">+=</span> <span class="token string">".1"</span><span class="token punctuation">;</span>  out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;br / >"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//插入一个空行</span>  out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;table>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;tr>&lt;td width='200px'nowrap>数据源&lt;/td>&lt;td width='200px'nowrap>省份&lt;/td>&lt;td width='200px'nowrap>城市&lt;/td>&lt;td width='200px'nowrap>ISP&lt;/td>&lt;/tr>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ipname为查询界面传出的ip地址字符串。随即输出表格的HTML代码。表格的其他参数由下列代码在head标签中定义，使用css代码而非html代码对其进行修饰。</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">table  </span><span class="token punctuation">{</span>      <span class="token property">border-collapse</span><span class="token punctuation">:</span>collapse<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">1000</span>px<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">table, td, th  </span><span class="token punctuation">{</span>  <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid black<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>最后为查询操作与打印表格的代码，使用较为简单的sql语句即可完成多表的查询，即一条语句查询一个表，需要注意的是sql查询语句为字符串，其变量名需要因查询的表不同而不同，否则会报错。</p><p>另外sql查询为空时会返回null值，需要对其进行处理变为空格。</p><p>表格打印完毕后关闭与数据库的链接并销毁变量。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//A数据库</span> String sqla<span class="token operator">=</span><span class="token string">"select * from A where ip="</span><span class="token operator">+</span><span class="token string">"'"</span><span class="token operator">+</span>ipname<span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">;</span> rs<span class="token operator">=</span>stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sqla<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//rs为sql查询后获得的列表</span> <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> String col1<span class="token operator">=</span><span class="token string">"A库"</span><span class="token punctuation">;</span> String col2<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> String col3<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> String col4<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;tr>&lt;td>"</span><span class="token operator">+</span>col1<span class="token operator">+</span><span class="token string">"&lt;/td>&lt;td>"</span><span class="token operator">+</span>col2<span class="token operator">+</span><span class="token string">"&lt;/td>&lt;td>"</span><span class="token operator">+</span>col3<span class="token operator">+</span><span class="token string">"&lt;/td>&lt;td>"</span><span class="token operator">+</span>col4<span class="token operator">+</span><span class="token string">"&lt;/td>&lt;/tr>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//B数据库</span> String sqlb<span class="token operator">=</span><span class="token string">"select * from B where ip="</span><span class="token operator">+</span><span class="token string">"'"</span><span class="token operator">+</span>ipname<span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">;</span> rs<span class="token operator">=</span>stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sqlb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> String col1<span class="token operator">=</span><span class="token string">"B库"</span><span class="token punctuation">;</span> String col2<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> String col3<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>col3 <span class="token operator">==</span> null<span class="token punctuation">)</span>    col3 <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">;</span> String col4<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">;</span>   out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;tr>&lt;td>"</span><span class="token operator">+</span>col1<span class="token operator">+</span><span class="token string">"&lt;/td>&lt;td>"</span><span class="token operator">+</span>col2<span class="token operator">+</span><span class="token string">"&lt;/td>&lt;td>"</span><span class="token operator">+</span>col3<span class="token operator">+</span><span class="token string">"&lt;/td>&lt;td>"</span><span class="token operator">+</span>col4<span class="token operator">+</span><span class="token string">"&lt;/td>&lt;/tr>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;/table>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>整个流程可类比一个冷笑话“如何将大象装进冰箱”，打开冰箱——装进大象——关上冰箱。本例中链接的数据库是Oracle，对于MySQL也是类似的过程与代码，只需要更改jdbc驱动部分的代码即可。</p><p>下篇将讲解查询系统的搭建与demo实现。</p><p>参考链接：<a href="http://blog.sina.com.cn/s/blog_62186b460100hl99.html" target="_blank" rel="noopener">jsp链接Oracle数据库</a></p>]]></content>
      
      
      <categories>
          
          <category> Web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web development </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat+JSP+Oracle开发笔记（1）</title>
      <link href="/2017/05/28/2017-05-28-tomcat-jsp-oracle-dev-note-tomcat/"/>
      <url>/2017/05/28/2017-05-28-tomcat-jsp-oracle-dev-note-tomcat/</url>
      
        <content type="html"><![CDATA[<p>这段时间给安排了一个活，做一个数据库的查询界面，我也很诧异，我一个学电子的，怎么就来做这个玩意了呢。</p><p>google一番，大概了解了下这类的开发基本都是基于tomcat、jsp、oracle\MySQL进行的。我把整个开发流程分为几个部分来进行详细地讲解，以供更多像我一般零基础的小白快速入手。</p><h2 id="Tomcat安装及配置"><a href="#Tomcat安装及配置" class="headerlink" title="Tomcat安装及配置"></a>Tomcat安装及配置</h2><p>作为本地服务器，有多种技术选型，相对而言Tomcat是较为简单且安全的。Tomcat是依托Java Development Kit运行的，所以在安装前需要下载并安装配置JDK，步骤如下</p><p>1.点击<a href="http://www.oracle.com/technetwork/cn/java/javase/downloads/jdk8-downloads-2133151-zhs.html" target="_blank" rel="noopener">Java SE Development Kit 8 — 下载</a>打开界面，点击接受许可协议，根据自己系统类型选择X86/X64版本的安装文件，下载后双击进行安装，使用默认安装位置。</p><p>2.添加环境变量：此电脑/我的电脑-&gt;（右键）属性-&gt;高级系统设置-&gt;环境变量</p><p>在系统变量下新建名为JAVA_HOME的变量，变量值填入JDK的安装目录，如我的就是C:\Program Files\Java\jdk1.8.0_111。</p><p>3.在原有的系统变量 Path后面加上英文分号，再添加%JAVA_HOME%\bin;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\jre\bin; 三个变量值以英文的分号间隔开。</p><p>安装配置完毕后可以调出CMD命令行界面，输入java、javac、java -version以测试是否安装正确，若安装正确会弹出若干信息及提示。</p><p>接下来就可以安装<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">tomcat</a>了，根据我自己的尝试，建议直接使用Tomcat7，功能足够满足基本需求了。试过tomcat9出现个人无法解决的问题。</p><p>1.根据系统位数下载其压缩包，解压后直接放置在自己喜好的文件夹下，我习惯都放在Program Files下，所以文件夹位置为C:\Program Files\apache-tomcat-7.0.78。</p><p>2.类似JDK，tomcat也需要配置环境变量</p><p>在系统变量下新建名为CATALINA_HOME的变量，值为tomcat文件夹所在的目录，如我的就是C:\Program Files\apache-tomcat-7.0.78。</p><p>在系统变量 Path的最后面添加%CATALINA_HOME%\lib;%CATALINA_HOME%\lib\servlet-api.jar;%CATALINA_HOME%\lib\jsp-api.jar 变量值以英文的分号间隔开。</p><p>3.配置管理员权限，进入\apache-tomcat-7.0.78\conf\tomcat-users.xml，使用notepad++等编辑器打开，找到最末，添加上</p><pre><code>&lt;role rolename=&quot;manager-gui&quot;/&gt; &lt;role rolename=&quot;admin-gui&quot;/&gt; &lt;user username=&quot;admin&quot; password=&quot;YOUROWNRPASSWORD&quot; roles=&quot;admin-gui&quot;/&gt; &lt;user username=&quot;tomcat&quot; password=&quot;YOUROWNPASSWORD&quot; roles=&quot;manager-gui&quot;/&gt;</code></pre><p>管理员即为上述的admin以及manager。</p><p>进入tomcat目录下的bin目录，双击startup.bat即可启动tomcat，正常界面如下：</p><p>此时在浏览器中输入localhost:8080即可打开tomcat欢迎界面，说明配置成功，点击manager，输入配置的用户名与密码即可进入管理界面。</p><p>除从bin目录下的startup.bat启动tomcat外，还可在bin目录下启动命令行，输入service.bat install并回车安装service服务，正确安装后。双击tomcat7w.exe，点击start/stop即可启动/停止tomcat7服务。</p>]]></content>
      
      
      <categories>
          
          <category> Web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web development </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫实战【1】：抓取毒舌电影最新推送</title>
      <link href="/2017/05/08/2017-05-08-python-spider-dsmovie/"/>
      <url>/2017/05/08/2017-05-08-python-spider-dsmovie/</url>
      
        <content type="html"><![CDATA[<p>​<br>update：6/11/2017 由于毒舌电影公众号被关闭账号，源码已失效，可参考并调整相关参数以适配网站上其他公众号文章的抓取。</p><p><del>~</del></p><p>作为一个电影爱好者，“毒舌电影”是我比较关注的公众号号，昨天偶然发现<a href="http://chuansong.me/" target="_blank" rel="noopener">传送门</a>这么一个网站，可以在线阅读微信公众号，结合基础知识，一个豆瓣爬虫范本以及网上的资料进行阅读学习，形成一个可以使用的毒舌电影最新推送爬虫。</p><p>​    GitHub链接：<a href="https://github.com/daewis/scrapy-collection/blob/master/chuansongmen-dsmovie-recent1.0.py" target="_blank" rel="noopener">毒舌电影最新推送爬虫1.0</a>，使用Python2.7进行编写。</p><p>​    接下来我会分别讲解各个函数模块如何实现功能，一些待改进的地方，最后进行总结。</p><h2 id="模块讲解"><a href="#模块讲解" class="headerlink" title="模块讲解"></a>模块讲解</h2><h3 id="1-导入包，初始化链接以及Header"><a href="#1-导入包，初始化链接以及Header" class="headerlink" title="1.导入包，初始化链接以及Header"></a>1.导入包，初始化链接以及Header</h3><p>​    代码如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup <span class="token comment" spellcheck="true">#美丽汤模块，解析网页</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token comment" spellcheck="true">#取随机数</span><span class="token keyword">import</span> csv <span class="token comment" spellcheck="true">#写csv文件</span><span class="token keyword">from</span> urllib2 <span class="token keyword">import</span> Request<span class="token punctuation">,</span> urlopen<span class="token punctuation">,</span> URLError<span class="token punctuation">,</span> HTTPError <span class="token comment" spellcheck="true">#打开网页，报错信息</span>download_url <span class="token operator">=</span> <span class="token string">'http://chuansong.me/account/dsmovie/recent'</span>headers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6)     Gecko/20091201 Firefox/3.5.6'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\<span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.12 Safari/535.11'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\<span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\<span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0'</span><span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#四个备选header，缺少header则返回403错误</span></code></pre><h3 id="2-拼接URL"><a href="#2-拼接URL" class="headerlink" title="2.拼接URL"></a>2.拼接URL</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">updateurl</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    item_num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">12</span>    url <span class="token operator">=</span> <span class="token string">'http://chuansong.me/account/dsmovie?start='</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>item_num<span class="token punctuation">)</span>    <span class="token keyword">return</span> url</code></pre><p>​    num 给页面计数，是页面链接的值-1，初始值为0，读取完一个界面后，num自动+1，因为每个页面显示12条推送，故实际页面的url链接尾部数字为12的倍数，item_num为整型变量，需使用str函数转换成字符。</p><h3 id="3-读取链接并返回源代码"><a href="#3-读取链接并返回源代码" class="headerlink" title="3.读取链接并返回源代码"></a>3.读取链接并返回源代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_raw_html</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    req <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">[</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#随机取header</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>           response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>req<span class="token punctuation">,</span>timeout <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> 设置timeout以防止频繁出现<span class="token number">403</span>错误    <span class="token keyword">except</span> HTTPError<span class="token punctuation">,</span> e<span class="token punctuation">:</span>           <span class="token keyword">print</span> <span class="token string">'Error code: '</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>code      <span class="token keyword">except</span> URLError<span class="token punctuation">,</span> e<span class="token punctuation">:</span>           <span class="token keyword">print</span> <span class="token string">'Reason: '</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>reason      <span class="token keyword">else</span><span class="token punctuation">:</span>          <span class="token keyword">print</span> <span class="token string">'Success'</span>    <span class="token keyword">return</span> response</code></pre><p>​    这段很简单，设定urlopen参数与Request参数，给一个url链接，返回网页源代码。</p><p>​    后续也将在此处继续进行优化，主要问题是爬取页面一旦超过5个，即会在爬取中出现Error code:403错误，并显示local variable ‘response’ referenced before assignment，即页面无法打开，导致后续bs4解析返回空值，从而导致爬取失败。</p><p>​    初步思路是考虑更换ip代理，也在寻找其他解决方法。</p><h3 id="4-解析网页并返回文章列表"><a href="#4-解析网页并返回文章列表" class="headerlink" title="4.解析网页并返回文章列表"></a>4.解析网页并返回文章列表</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse_html</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    bsObj <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    article_list <span class="token operator">=</span> bsObj<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span><span class="token string">'main_col col w4_5'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>     articles_list_result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> article <span class="token keyword">in</span> article_list<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span><span class="token string">'pagedlist_item'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        link <span class="token operator">=</span> <span class="token string">'http://chuansongmen.me'</span>        title <span class="token operator">=</span> article<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getText<span class="token punctuation">(</span><span class="token punctuation">)</span>        link_part <span class="token operator">=</span> article<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>        link <span class="token operator">=</span> link <span class="token operator">+</span> link_part        time <span class="token operator">=</span> article<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span><span class="token string">'timestamp'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getText<span class="token punctuation">(</span><span class="token punctuation">)</span>        articles_list_result<span class="token punctuation">.</span>append<span class="token punctuation">(</span> <span class="token punctuation">[</span>title<span class="token punctuation">,</span>link<span class="token punctuation">,</span>time<span class="token punctuation">]</span> <span class="token punctuation">)</span>    next_page <span class="token operator">=</span> bsObj<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'style'</span><span class="token punctuation">:</span><span class="token string">'text-align: center;'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> next_page<span class="token punctuation">:</span>        <span class="token keyword">return</span> articles_list_result<span class="token punctuation">,</span> next_page<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> articles_list_result</code></pre><p>​    典型的BeautifulSoup解析思路，首先在页面中点击审查元素，寻找到包含有推送文章列表的HTML代码段（后统称代码块），其次寻找一个代码块，使其包含这个段，并且具有唯一特征（标签名，属性名，属性值），使用find定位到这个块，赋值给article_list，再从list中寻找每条推送所在的最小代码段，取其唯一特征（同上），使用find_all定位。</p><p>​    接下来即是提取每个段的信息，该站上每条推送包含标题，站内链接，时间以及一条不明属性句子，介于本身能力以及兴趣，只提取前三类信息。其中标题，时间可以先定位所在标签，后使用getText函数进行提取，而站内链接则需要先定位提取，后与网站首页链接进行拼接后得到。提取后以列表形式赋值到articles_list_result。</p><p>​    当解析到下一页所在代码块时，仅使用其非False属性，返回已有的list_result以及next_page所在标签内含的站内链接，此处后续可进行改进。</p><p>​    潜在问题：一旦3中的网页读取出错，输入本函数的html则为空，即会使find_all函数出错，出现</p><pre><code>&#39;NoneType&#39; object has no attribute &#39;find_all&#39;或&#39;NoneType&#39; object has no attribute &#39;getText&#39;</code></pre><p>两种错误，所以网页读取直接影响最终爬虫效果。</p><h3 id="5-写出到CSV文件"><a href="#5-写出到CSV文件" class="headerlink" title="5.写出到CSV文件"></a>5.写出到CSV文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">export_to_csv</span><span class="token punctuation">(</span>article_list_result<span class="token punctuation">)</span><span class="token punctuation">:</span>    csvFile <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"article-recent2.csv"</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span>    csvFile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\xEF\xBB\xBF'</span><span class="token punctuation">)</span>    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>csvFile<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"Title"</span><span class="token punctuation">,</span><span class="token string">"link"</span><span class="token punctuation">,</span><span class="token string">"Time"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> page_result <span class="token keyword">in</span> article_list_result<span class="token punctuation">:</span>            <span class="token keyword">for</span>  article <span class="token keyword">in</span> page_result<span class="token punctuation">:</span>                article<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> article<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>                writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>article<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        csvFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​    这段基本是全面取自参考链接中代码的，大致流程即是以二进制文件形式打开一个名为article-recent2.csv的文件，若不存在即新建一个空文件，依次每行写入list_result中的数据，最后关闭文件。</p><p>​    其中article[0]若不声明以’UTF-8’编码，则会出现下述错误，具体原因有待研究。</p><pre><code>&#39;ascii&#39; codec can&#39;t encode characters in position 1-11: ordinal not in range(128)</code></pre><h3 id="6-主函数"><a href="#6-主函数" class="headerlink" title="6.主函数"></a>6.主函数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> updateurl<span class="token punctuation">(</span>num<span class="token punctuation">)</span>        html <span class="token operator">=</span> get_raw_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        articles<span class="token punctuation">,</span>url_part <span class="token operator">=</span> parse_html<span class="token punctuation">(</span>html<span class="token punctuation">)</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>articles<span class="token punctuation">)</span>        num <span class="token operator">+=</span> <span class="token number">1</span>    export_to_csv<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'export done'</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​    各个函数写好后组合在一起即可，注意循环运行的逻辑条件以及num自行增加语句的位置。</p><h2 id="待改进之处"><a href="#待改进之处" class="headerlink" title="待改进之处"></a>待改进之处</h2><ol><li>网页迭代的高效性：目前网页迭代是依靠给定的数值，页面中有相关数值可使用，如何将其提取提取出来并融合进循环中，是一个有待研究的问题。</li><li>网页读取的稳定性：这是直接影响到一个爬虫是否实用的地方。正如上文所述，希望能利用ip代理以解决http状态为403的问题，同时也寻求其他方法。</li><li>提取更多信息：每个条目中还包括一条句子，可以使用正则表达式提取并添加在列表中</li><li>尝试其他存储方法：学习并练习MySQL，MongoDB等数据库进行存储。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    本文详细介绍了一个可用的毒舌电影文章列表爬虫的程序代码，并详解了每个函数的功能，部分语句给出了注释。可供新手童鞋学习参考。</p><p>参考链接</p><p><a href="https://github.com/segalou/python_projects/blob/master/douban_movie_spyder/douban_top_movies.py" target="_blank" rel="noopener">segalou/doubanmovie_spyder</a></p>]]></content>
      
      
      <categories>
          
          <category> Python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter Notebook简洁教程</title>
      <link href="/2017/05/02/2017-05-02-python-jupyternotebook-simple-tutial/"/>
      <url>/2017/05/02/2017-05-02-python-jupyternotebook-simple-tutial/</url>
      
        <content type="html"><![CDATA[<p>继上次对Anaconda进行了一定的讲解后，有朋友建议我再对IPython笔记本的使用做一定的介绍，我自己找了些资料，基于对最为常用的功能进行介绍目的，写了这么篇简单的教程。</p><p>在完成Ananconda安装后，在cmd窗口中输入jupyter notebook，随机将会在默认浏览器中打开jupyter notebook主界面（建议将Chrome设置为默认浏览器）。</p><p><img src="http://img.blog.csdn.net/20170502162717275?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzAyMzI5Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>jupyter notebook的编辑是依托于某个文件夹进行的，默认打开文件夹为安装到的那个目录。在cmd窗口输入jupyter notebook –generate-config会返回一个文件的路径，打开该文件，找到下面所示的代码</p><pre><code>## The directory to use for notebooks and kernels.#c.NotebookApp.notebook_dir = u&#39;&#39;</code></pre><p>将第二行的“ # ”删去，并将“ u’’ ”修改为自己想要定位的文件夹地址，保存文件，再重新打开jupyter notebook即可。</p><p>新建notebook：点击右上角的new，即打开一个下拉菜单，其中，Windows平台一般均显示Terminals Unavailable且按键呈灰色，点击Python2即可打开一个基于Python2的jupyter notebook。</p><p><img src="http://img.blog.csdn.net/20170502162615023?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzAyMzI5Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>notebook 界面从上而下由四个区域组成：notebook 的名称（点击即可修改）、提供保存、导出、重载 notebook以及重启内核等选项的工具栏、快捷键Toolbar、notebook 的内容编辑区。</p><p>下面概述菜单栏各项的主要功能：<br>#####File:</p><ul><li>New Notebook打开新笔记<br>Checkpoint（记录点，类比不同版本）<br>Revert to Checkpoint返回到某一个记录点<br>Download as: ipynb、py、md、html、pdf</li></ul><p>#####Edit：</p><ul><li>包括复制、粘贴、删除、合并、移动等cell区域的操作</li></ul><p>#####View：</p><ul><li><p>Toggle Header是否显示头部信息，包括文件名和上次保存时间<br>Toggle ToolBar是否显示工具栏<br>Cell ToolBar<br>#####Insert：</p></li><li><p>Insert Cell Above上方插入一个cell区域<br>Insert Cell Below 下方插入一个cell区域</p></li></ul><p>#####Kernel：</p><ul><li>Restart和Reconnect相关<br>Change Kernel：换Python环境<br>Help：一些教程链接</li></ul><p>快捷键Toolbar集成了高频使用的功能，其中点击显示为“code”的单元格类型右侧下拉菜单可改变cell单元格的类型，点击键盘可查看所有快捷键。</p><p>整个jupyter notebook界面最为重要的就是cell区域，cell中有多种类型，包括表示代码的code单元格与格式化文本的Markdown单元格，均可运行（快捷键为shift+enter，更多快捷键见参考链接最后一条），code类型结果为程序结果，Markdown类型结果则为格式化的文本，包括正文、标题等。</p><p>Cell不同单元格之间互相独立，上一个单元格中的变量在本单元格中不赋值的话即无法使用，例如下图。</p><p><img src="http://img.blog.csdn.net/20170502162827135?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzAyMzI5Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>单元格除了删除移动剪贴外还可以进行合并，从而一次性执行大段的代码。</p><p>Markdown类型单元格除文本外还可嵌入公式、表格、图片、音乐、视频、网页等。这里具体不展开。</p><p>单元格中还可集成Matplotlib，从而进行绘图，但需要注意绘图前需要输入%Matplotlib inline并运行，否则即使运行终端可用的绘图代码段，cell也只会返回一个文件说明，如下图所示。</p><p><img src="http://img.blog.csdn.net/20170502162905074?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzAyMzI5Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>以%或%%开头的命令称为魔法命令，更多信息请自行查询。</p><p>本文基于下述教程，结合初学者实践进行精简，总结出一个jupyter notebook简洁教程，方便大家快速上手使用, 希望对大家有所帮助。</p><p>参考链接：<br><a href="http://codingpy.com/article/getting-started-with-jupyter-notebook-part-1/" target="_blank" rel="noopener">Jupyter Notebook快速入门（上）</a><br><a href="http://codingpy.com/article/getting-started-with-jupyter-notebook-part-2/" target="_blank" rel="noopener">Jupyter Notebook快速入门（下）</a><br><a href="http://www.jianshu.com/p/2d7b91c3746f#" target="_blank" rel="noopener">Jupyter快速10分钟教程</a><br><a href="http://cs231n.github.io/ipython-tutorial/" target="_blank" rel="noopener">斯坦福CS231n的IPython教程</a><br><a href="http://blog.csdn.net/lawme/article/details/51034543" target="_blank" rel="noopener">Jupyter Notebook 的快捷键</a></p>]]></content>
      
      
      <categories>
          
          <category> Python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Jupyter Notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python自动化脚本之url提取及自动打开页面</title>
      <link href="/2017/04/29/2017-04-29-python-autostript-1-url-fulfil-auto-open/"/>
      <url>/2017/04/29/2017-04-29-python-autostript-1-url-fulfil-auto-open/</url>
      
        <content type="html"><![CDATA[<p>前段时间被安排了个任务，读取一个五百行的csv文件，依次打开每行中的url，并依据打开的结果对每个url进行分类，有赌博、色情、无法打开、空页面、正常五类，刚好也在学习Python，就想自己写个半自动化的脚本（所谓半自动化是因为type还得自己输入然后敲回车）以省去“复制url——粘贴到浏览器地址栏——回车”这三步操作。最后输出一个名为“501-1000”的csv文件。</p><p>代码地址在<a href="https://github.com/daewis/Automate/blob/master/urlopen%26fill%20V1.3.py" target="_blank" rel="noopener">https://github.com/daewis/Automate/blob/master/urlopen%26fill%20V1.3.py</a> ，现贴在下面。</p><pre><code># -*- coding: utf-8 -*-&quot;&quot;&quot;Created on Wed Apr 19 12:25:04 2017@author: lewiskoo&quot;&quot;&quot;import pandas as pdimport webbrowserdata_df = pd.read_csv(&#39;1.csv&#39;)n = 0chromePath = r&#39;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&#39;webbrowser.register(&#39;chrome&#39;, None, webbrowser.BackgroundBrowser(chromePath))  #register the webbrowser to openup pageswhile n &lt; 5:    print(&#39;~~~~~~~~~~No. %d is processing~~~~~~~~~~~~~&#39; %n)    print(&#39;赌1 色2 无法访问3 空4 正常5&#39;)    webbrowser.get(&#39;chrome&#39;).open_new_tab(data_df.name[n]) #use chrome to open pages    i = int(input(&#39;which type?&#39;))    if i == 0:        break    elif i == 1:        data_df.type[n] = &#39;赌&#39;    elif i == 2:        data_df.type[n] = &#39;色&#39;    elif i == 3:        data_df.type[n] = &#39;无法访问&#39;    elif i == 4:        data_df.type[n] = &#39;空&#39;    elif i == 5:        data_df.type[n] = &#39;正常&#39;    else:        data_df.type[n] = i    print(&#39;type of No.%d is decided&#39; %n)    n += 1data_df.to_csv(&#39;501-1000.csv&#39;) #output the df into a csv fileprint(&#39;All the stuff is done and the csv is written.&#39;)</code></pre><p>写的很不Pythonic，也有些小bug。但作为初学者，自我感觉能用起来，就是很大的进步了。</p><p>顺手记录下自己的经验教训：</p><ol><li>test以及本地保存多版本的重要性，最开始脚本写的更为简单甚至简陋，能满足基本功能，然后就想怎么搞得炫一点，然后手贱改了几个地方没test，最后输完500个值发现并没有保存在dataframe中，瞬间爆炸，幸好history记录的有一定数据。所以无论DDL多么紧，一旦打算使用程序进行自动化操作，一定得确保基本功能的可靠。</li><li>需要持续锻炼自己搜索信息的能力，就像以前专业课做课程设计找参考资料一样，不同类型的资料需要不同方法去找，代码就在github、简书、CSDN等网站上搜，算法就得通过Google Scholar或者知网搜。使用goggle是种能力，快速找到自己想要的信息也是件不容易办到的事。</li><li>代码得常写，我葛优躺一般瘫在办公椅上机械地敲type类型的时候，老觉得自己哪个地方好像没写对（事后证明果然出问题了）。如果没有经常写经常debug，很难对自己的代码水平有自信，要误事的。 </li></ol>]]></content>
      
      
      <categories>
          
          <category> Python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Automation </tag>
            
            <tag> File Process </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda、Theano与Keras配置教程</title>
      <link href="/2017/02/05/2017-02-05-python-anaconda-machinelearning/"/>
      <url>/2017/02/05/2017-02-05-python-anaconda-machinelearning/</url>
      
        <content type="html"><![CDATA[<p>这学期跟着舍友旁听由佛罗里达大学吴大鹏教授的《统计机器学习》，参考教材为《Pattern Classification》,很喜欢吴老师的教学方式，时常理论联系实际，或者使用通俗易懂的例子进行类比讲解，作为数学学渣的我表示泪牛满面，总算遇上了一门听得懂的机器学习课程，十分感谢老师的教学。</p><p>昨天课程上老师推荐了Anaconda以及Theano、Keras作为进行机器学习的工具，Anaconda我也用了一段时间，很喜欢这个功能强大的Python科学计算发行版。接下来我将简单介绍Anaconda以及整体安装、配置过程。</p><h2 id="一、Anaconda简介"><a href="#一、Anaconda简介" class="headerlink" title="一、Anaconda简介"></a>一、Anaconda简介</h2><p>Anaconda是Red Hat Enterprise Linux、CentOS、Fedora等操作系统的安装管理程序，本质上是一个软件发行版。它以Python及C语言写成，可以用来自动安装配置，包含了conda Numpy等科学包以及依赖项，如果需要节省带宽或存储空间，可以使用Miniconda这个较小的发行版（仅包含conda与Python）。Anaconda提供纯文字模式和GUI模式，用户可以安装在Windows，Linux，OS X等系统上，对本机上的Python以及包进行管理。</p><p>Anaconda官网为<a href="https://www.continuum.io/，" target="_blank" rel="noopener">https://www.continuum.io/，</a> 用户可根据自己的需求下载基于Python3以及Python2的版本，分别有64位与32位的区分，大小均不一样。除官网外，清华大学开源软件镜像站<a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/</a> 也提供下载，后文将其设置为包下载的路径。我主要使用Python3，所以也将以此为例进行安装、配置的讲解。（但请相信3和2安装过程无异）</p><h2 id="二、Anaconda安装与分支应用"><a href="#二、Anaconda安装与分支应用" class="headerlink" title="二、Anaconda安装与分支应用"></a>二、Anaconda安装与分支应用</h2><p>双击安装包，依次点击next以及 I agree,接下来select installation type使用推荐的just me类别，location选择默认的位置，接下来就静等安装完成。</p><p>Anaconda安装完毕后安装文件夹如下图所示：</p><p><img src="http://img.blog.csdn.net/20170429010923529?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzAyMzI5Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><ul><li>Anaconda Navigator：强调内容图形化控制台，可以进行不同环境下包的升级，移除等管理。</li><li>Anaconda Prompt：管理器，可以看做是cmd的另一个显式入口，可以在其中进行conda，pip等操作。</li><li>IPython：Python的交互式编程环境，对特定保留词会有不同的显示方案。</li><li>Jupyter QtConsole：进一步加强了IPython的功能，可以同时进行可视化与交互式过程</li><li>Jupyter Notebook：进一步加强了Qt的功能，可以看做是一个基于浏览器的编程笔记本，我们可以在特定文件夹下进行新建笔记，编写代码并演示。其中代码可以是脚本形式，也可以是shell交互式。</li><li>Spyder：一个类似MATLAB, RStudio的IDE工具，可以同时进行脚本与交互式编程，还可以查看变量与工作路径下的文档。对于有MATLAB使用经验的童鞋来说， Spyder上手很方便。</li></ul><p><strong>划重点：一般来说 Navigator，Prompt，Jupyter Notebook，Spyder使用频率最高，前两者对包进行管理，后两者进行代码编写以及测试。</strong><br> <strong>PS</strong>试过了一段时间Pycharm之后感觉，还是这些专门设计过的IDE要比Spyder好用的多，2020年了，就算不用Pycharm，用VS Code也挺不错的。</p><h2 id="三、Anaconda的简单配置"><a href="#三、Anaconda的简单配置" class="headerlink" title="三、Anaconda的简单配置"></a>三、Anaconda的简单配置</h2><p>接下来我们将对已安装好的工具进行一定的配置，从而拥有更好的使用体验。</p><ul><li>Spyder：主要是对界面进行调整。打开Spyder，点击菜单栏Tools，选中Preferences，选择Syntax coloring，右边的Scheme中选择Monokai或者其他自己喜欢的配色方案，点击Apply以及OK。Monokai方案底色为黑色，代码为亮色，对眼睛相对友好，且不影响阅读。然后调整窗口，使左侧为Editor窗口，右侧为IPython console等窗口，这样方便使用。</li><li>Prompt：</li><li>1.设置清华开源软件镜像站为Anaconda仓库。打开cmd窗口，运行以下代码：</li></ul><pre><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --set show_channel_urls yes</code></pre><ul><li><p>即可成功设置下载源为清华的TUNA站，加快国内用户安装速度。</p></li><li><p>2.安装课程要求的Theano包与Keras包。<br>在cmd窗口运行 conda install theano，经过“fetch the metadata”与“solve the specification”后，弹出一串需要安装的包名称列表以及一句y/n的问句，输入y，然后等待自动下载安装。<br>因为Keras的打开有基于Theano与TensorFlow两种方式，而pip install默认是基于TensorFlow这种，所有需要手动到<a href="https://github.com/fchollet/keras" target="_blank" rel="noopener">https://github.com/fchollet/keras</a> 下载安装包，解压后在keras/backend文件夹下找到<strong>init</strong>.py文件，找到第22行，将tensorflow改为theano,再将第44行中的_backend改为’theano’，将整个安装文件夹拷贝到Anaconda下，打开文件夹，在地址栏输入cmd打开命令行窗口，输入Python setup.py install进行keras的安装。<br>安装完毕后可以在命令行中输入Python进入编程环境，再通过输入“import theano”与“import keras”以验证是否正确安装。</p></li><li><p>3.多环境多版本配置<br>由于Python2与3一定的不兼容，以及不同开发使用的包并不相同。所以可以在同一Anaconda目录下，建立不同环境（这里可以简单理解为编程环境，即使用哪种Python版本进行何种方向的编程开发）进行开发。鉴于已有完整的中英文指导教程，这里就不赘述了。中文请参考<a href="http://www.jianshu.com/p/d2e15200ee9b，英文请参考https://conda.io/docs/test-drive.html。" target="_blank" rel="noopener">http://www.jianshu.com/p/d2e15200ee9b，英文请参考https://conda.io/docs/test-drive.html。</a><br>曾经我在Anaconda3下安装了个完整的Anaconda2，后面发现这种举措还是比较傻，其他不说，光硬盘空间就足以心疼了。通过Anaconda建立不同环境，方便了使用不同语言，进行不同的开发工作，例如主要的包安装的是基于3.6的Anaconda3，但现在又需要简单学习以下Python2.7，那么可以建立一个仅有Python2.7，pip等可执行文件的环境，这样大大节省了空间，又方便了自己的使用。<br>四、结语</p></li></ul><hr><p>本文简要介绍了Anaconda，安装过程，以及一些简单的配置，希望能对第一次接触Anaconda的童鞋有所帮助。</p>]]></content>
      
      
      <categories>
          
          <category> IDE配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
